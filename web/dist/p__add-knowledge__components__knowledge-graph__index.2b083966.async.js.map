{"version":3,"file":"p__add-knowledge__components__knowledge-graph__index.2b083966.async.js","mappings":"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","sources":["webpack://web/./src/pages/add-knowledge/components/knowledge-graph/util.ts","webpack://web/./src/pages/add-knowledge/components/knowledge-graph/index.less?9fc4","webpack://web/./src/pages/add-knowledge/components/knowledge-graph/force-graph.tsx","webpack://web/./src/pages/add-knowledge/components/knowledge-graph/index.tsx"],"sourcesContent":["import { isEmpty } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\nclass KeyGenerator {\n  idx = 0;\n  chars: string[] = [];\n  constructor() {\n    const chars = Array(26)\n      .fill(1)\n      .map((x, idx) => String.fromCharCode(97 + idx)); // 26 char\n    this.chars = chars;\n  }\n  generateKey() {\n    const key = this.chars[this.idx];\n    this.idx++;\n    return key;\n  }\n}\n\n// Classify nodes based on edge relationships\nexport class Converter {\n  keyGenerator;\n  dict: Record<string, string> = {}; // key is node id, value is combo\n  constructor() {\n    this.keyGenerator = new KeyGenerator();\n  }\n  buildDict(edges: { source: string; target: string }[]) {\n    edges.forEach((x) => {\n      if (this.dict[x.source] && !this.dict[x.target]) {\n        this.dict[x.target] = this.dict[x.source];\n      } else if (!this.dict[x.source] && this.dict[x.target]) {\n        this.dict[x.source] = this.dict[x.target];\n      } else if (!this.dict[x.source] && !this.dict[x.target]) {\n        this.dict[x.source] = this.dict[x.target] =\n          this.keyGenerator.generateKey();\n      }\n    });\n    return this.dict;\n  }\n  buildNodesAndCombos(nodes: any[], edges: any[]) {\n    this.buildDict(edges);\n    const nextNodes = nodes.map((x) => ({ ...x, combo: this.dict[x.id] }));\n\n    const combos = Object.values(this.dict).reduce<any[]>((pre, cur) => {\n      if (pre.every((x) => x.id !== cur)) {\n        pre.push({\n          id: cur,\n          data: {\n            label: `Combo ${cur}`,\n          },\n        });\n      }\n      return pre;\n    }, []);\n\n    return { nodes: nextNodes, combos };\n  }\n}\n\nexport const isDataExist = (data: any) => {\n  return (\n    data?.data && typeof data?.data !== 'boolean' && !isEmpty(data?.data?.graph)\n  );\n};\n\nconst findCombo = (communities: string[]) => {\n  const combo = Array.isArray(communities) ? communities[0] : undefined;\n  return combo;\n};\n\nexport const buildNodesAndCombos = (nodes: any[]) => {\n  const combos: any[] = [];\n  nodes.forEach((x) => {\n    const combo = findCombo(x?.communities);\n    if (combo && combos.every((y) => y.data.label !== combo)) {\n      combos.push({\n        isCombo: true,\n        id: uuid(),\n        data: {\n          label: combo,\n        },\n      });\n    }\n  });\n\n  const nextNodes = nodes.map((x) => {\n    return {\n      ...x,\n      combo: combos.find((y) => y.data.label === findCombo(x?.communities))?.id,\n    };\n  });\n\n  return { nodes: nextNodes, combos };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"forceContainer\":\"forceContainer___PdykR\"};","import { ElementDatum, Graph, IElementEvent } from '@antv/g6';\nimport isEmpty from 'lodash/isEmpty';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { buildNodesAndCombos } from './util';\n\nimport styles from './index.less';\n\nconst TooltipColorMap = {\n  combo: 'red',\n  node: 'black',\n  edge: 'blue',\n};\n\ninterface IProps {\n  data: any;\n  show: boolean;\n}\n\nconst ForceGraph = ({ data, show }: IProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const graphRef = useRef<Graph | null>(null);\n\n  const nextData = useMemo(() => {\n    if (!isEmpty(data)) {\n      const graphData = data;\n      const mi = buildNodesAndCombos(graphData.nodes);\n      return { edges: graphData.edges, ...mi };\n    }\n    return { nodes: [], edges: [] };\n  }, [data]);\n\n  const render = useCallback(() => {\n    const graph = new Graph({\n      container: containerRef.current!,\n      autoFit: 'view',\n      autoResize: true,\n      behaviors: [\n        'drag-element',\n        'drag-canvas',\n        'zoom-canvas',\n        'collapse-expand',\n        {\n          type: 'hover-activate',\n          degree: 1, // 👈🏻 Activate relations.\n        },\n      ],\n      plugins: [\n        {\n          type: 'tooltip',\n          enterable: true,\n          getContent: (e: IElementEvent, items: ElementDatum) => {\n            if (Array.isArray(items)) {\n              if (items.some((x) => x?.isCombo)) {\n                return `<p style=\"font-weight:600;color:red\">${items?.[0]?.data?.label}</p>`;\n              }\n              let result = ``;\n              items.forEach((item) => {\n                result += `<section style=\"color:${TooltipColorMap[e['targetType'] as keyof typeof TooltipColorMap]};\"><h3>${item?.id}</h3>`;\n                if (item?.entity_type) {\n                  result += `<div style=\"padding-bottom: 6px;\"><b>Entity type: </b>${item?.entity_type}</div>`;\n                }\n                if (item?.weight) {\n                  result += `<div><b>Weight: </b>${item?.weight}</div>`;\n                }\n                if (item?.description) {\n                  result += `<p>${item?.description}</p>`;\n                }\n              });\n              return result + '</section>';\n            }\n            return undefined;\n          },\n        },\n      ],\n      layout: {\n        type: 'combo-combined',\n        preventOverlap: true,\n        comboPadding: 1,\n        spacing: 100,\n      },\n      node: {\n        style: {\n          size: 150,\n          labelText: (d) => d.id,\n          // labelPadding: 30,\n          labelFontSize: 40,\n          //   labelOffsetX: 20,\n          labelOffsetY: 20,\n          labelPlacement: 'center',\n          labelWordWrap: true,\n        },\n        palette: {\n          type: 'group',\n          field: (d) => {\n            return d?.entity_type as string;\n          },\n        },\n      },\n      edge: {\n        style: (model) => {\n          const weight: number = Number(model?.weight) || 2;\n          const lineWeight = weight * 4;\n          return {\n            stroke: '#99ADD1',\n            lineWidth: lineWeight > 10 ? 10 : lineWeight,\n          };\n        },\n      },\n    });\n\n    if (graphRef.current) {\n      graphRef.current.destroy();\n    }\n\n    graphRef.current = graph;\n\n    graph.setData(nextData);\n\n    graph.render();\n  }, [nextData]);\n\n  useEffect(() => {\n    if (!isEmpty(data)) {\n      render();\n    }\n  }, [data, render]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={styles.forceContainer}\n      style={{\n        width: '100%',\n        height: '100%',\n        display: show ? 'block' : 'none',\n      }}\n    />\n  );\n};\n\nexport default ForceGraph;\n","import { useFetchKnowledgeGraph } from '@/hooks/knowledge-hooks';\nimport React from 'react';\nimport ForceGraph from './force-graph';\n\nconst KnowledgeGraphModal: React.FC = () => {\n  const { data } = useFetchKnowledgeGraph();\n\n  return (\n    <section className={'w-full h-full'}>\n      <ForceGraph data={data?.graph} show></ForceGraph>\n    </section>\n  );\n};\n\nexport default KnowledgeGraphModal;\n"],"names":["findCombo","communities","Array","isArray","undefined","TooltipColorMap","combo","node","edge","_ref","data","show","containerRef","useRef","graphRef","nextData","useMemo","isEmpty","graphData","mi","nodes","combos","forEach","x","every","y","label","push","isCombo","id","uuid","map","_combos$find","_objectSpread","find","edges","render","useCallback","graph","Graph","container","current","autoFit","autoResize","behaviors","type","degree","plugins","enterable","getContent","e","items","_items$","some","concat","result","item","entity_type","weight","description","layout","preventOverlap","comboPadding","spacing","style","size","labelText","d","labelFontSize","labelOffsetY","labelPlacement","labelWordWrap","palette","field","model","lineWeight","Number","stroke","lineWidth","destroy","setData","useEffect","_jsx","ref","className","styles","width","height","display","useFetchKnowledgeGraph","children","ForceGraph"],"sourceRoot":""}