{"version":3,"file":"5040.6ad2d51f.async.js","mappings":"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","sources":["webpack://web/./src/hooks/chat-hooks.ts","webpack://web/./src/pages/chat/hooks.ts","webpack://web/./src/pages/chat/shared-hooks.ts","webpack://web/./src/services/chat-service.ts","webpack://web/./src/utils/index.ts"],"sourcesContent":["import { ChatSearchParams } from '@/constants/chat';\nimport {\n  IConversation,\n  IDialog,\n  IStats,\n  IToken,\n} from '@/interfaces/database/chat';\nimport {\n  IAskRequestBody,\n  IFeedbackRequestBody,\n} from '@/interfaces/request/chat';\nimport i18n from '@/locales/config';\nimport { IClientConversation } from '@/pages/chat/interface';\nimport { useGetSharedChatSearchParams } from '@/pages/chat/shared-hooks';\nimport chatService from '@/services/chat-service';\nimport {\n  buildMessageListWithUuid,\n  getConversationId,\n  isConversationIdExist,\n} from '@/utils/chat';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { message } from 'antd';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { has, set } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { history, useSearchParams } from 'umi';\n\n//#region logic\n\nexport const useClickDialogCard = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, setSearchParams] = useSearchParams();\n\n  const newQueryParameters: URLSearchParams = useMemo(() => {\n    return new URLSearchParams();\n  }, []);\n\n  const handleClickDialog = useCallback(\n    (dialogId: string) => {\n      newQueryParameters.set(ChatSearchParams.DialogId, dialogId);\n      // newQueryParameters.set(\n      //   ChatSearchParams.ConversationId,\n      //   EmptyConversationId,\n      // );\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  return { handleClickDialog };\n};\n\nexport const useClickConversationCard = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const handleClickConversation = useCallback(\n    (conversationId: string, isNew: string) => {\n      newQueryParameters.set(ChatSearchParams.ConversationId, conversationId);\n      newQueryParameters.set(ChatSearchParams.isNew, isNew);\n      setSearchParams(newQueryParameters);\n    },\n    [setSearchParams, newQueryParameters],\n  );\n\n  return { handleClickConversation };\n};\n\nexport const useGetChatSearchParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    dialogId: currentQueryParameters.get(ChatSearchParams.DialogId) || '',\n    conversationId:\n      currentQueryParameters.get(ChatSearchParams.ConversationId) || '',\n    isNew: currentQueryParameters.get(ChatSearchParams.isNew) || '',\n  };\n};\n\n//#endregion\n\n//#region dialog\n\nexport const useFetchNextDialogList = () => {\n  const { handleClickDialog } = useClickDialogCard();\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog[]>({\n    queryKey: ['fetchDialogList'],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async (...params) => {\n      console.log('🚀 ~ queryFn: ~ params:', params);\n      const { data } = await chatService.listDialog();\n\n      if (data.code === 0) {\n        const list: IDialog[] = data.data;\n        if (list.length > 0) {\n          if (list.every((x) => x.id !== dialogId)) {\n            handleClickDialog(data.data[0].id);\n          }\n        } else {\n          history.push('/chat');\n        }\n      }\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchChatAppList = () => {\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog[]>({\n    queryKey: ['fetchChatAppList'],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      const { data } = await chatService.listDialog();\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useSetNextDialog = () => {\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['setDialog'],\n    mutationFn: async (params: IDialog) => {\n      const { data } = await chatService.setDialog(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({\n          exact: false,\n          queryKey: ['fetchDialogList'],\n        });\n\n        queryClient.invalidateQueries({\n          queryKey: ['fetchDialog'],\n        });\n        message.success(\n          i18n.t(`message.${params.dialog_id ? 'modified' : 'created'}`),\n        );\n      }\n      return data?.code;\n    },\n  });\n\n  return { data, loading, setDialog: mutateAsync };\n};\n\nexport const useFetchNextDialog = () => {\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog>({\n    queryKey: ['fetchDialog', dialogId],\n    gcTime: 0,\n    initialData: {} as IDialog,\n    enabled: !!dialogId,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      const { data } = await chatService.getDialog({ dialogId });\n\n      return data?.data ?? ({} as IDialog);\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchManualDialog = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchManualDialog'],\n    gcTime: 0,\n    mutationFn: async (dialogId: string) => {\n      const { data } = await chatService.getDialog({ dialogId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, fetchDialog: mutateAsync };\n};\n\nexport const useRemoveNextDialog = () => {\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeDialog'],\n    mutationFn: async (dialogIds: string[]) => {\n      const { data } = await chatService.removeDialog({ dialogIds });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchDialogList'] });\n\n        message.success(i18n.t('message.deleted'));\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, removeDialog: mutateAsync };\n};\n\n//#endregion\n\n//#region conversation\n\nexport const useFetchNextConversationList = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { handleClickConversation } = useClickConversationCard();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IConversation[]>({\n    queryKey: ['fetchConversationList', dialogId],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    enabled: !!dialogId,\n    queryFn: async () => {\n      const { data } = await chatService.listConversation({ dialogId });\n      if (data.code === 0) {\n        if (data.data.length > 0) {\n          handleClickConversation(data.data[0].id, '');\n        } else {\n          handleClickConversation('', '');\n        }\n      }\n      return data?.data;\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchNextConversation = () => {\n  const { isNew, conversationId } = useGetChatSearchParams();\n  const { sharedId } = useGetSharedChatSearchParams();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IClientConversation>({\n    queryKey: ['fetchConversation', conversationId],\n    initialData: {} as IClientConversation,\n    // enabled: isConversationIdExist(conversationId),\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      if (\n        isNew !== 'true' &&\n        isConversationIdExist(sharedId || conversationId)\n      ) {\n        const { data } = await chatService.getConversation({\n          conversationId: conversationId || sharedId,\n        });\n\n        const conversation = data?.data ?? {};\n\n        const messageList = buildMessageListWithUuid(conversation?.message);\n\n        return { ...conversation, message: messageList };\n      }\n      return { message: [] };\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchNextConversationSSE = () => {\n  const { isNew } = useGetChatSearchParams();\n  const { sharedId } = useGetSharedChatSearchParams();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IClientConversation>({\n    queryKey: ['fetchConversationSSE', sharedId],\n    initialData: {} as IClientConversation,\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      if (isNew !== 'true' && isConversationIdExist(sharedId || '')) {\n        if (!sharedId) return {};\n        const { data } = await chatService.getConversationSSE({}, sharedId);\n        const conversation = data?.data ?? {};\n        const messageList = buildMessageListWithUuid(conversation?.message);\n        return { ...conversation, message: messageList };\n      }\n      return { message: [] };\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchManualConversation = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchManualConversation'],\n    gcTime: 0,\n    mutationFn: async (conversationId: string) => {\n      const { data } = await chatService.getConversation({ conversationId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, fetchConversation: mutateAsync };\n};\n\nexport const useUpdateNextConversation = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['updateConversation'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data } = await chatService.setConversation({\n        ...params,\n        conversation_id: params.conversation_id\n          ? params.conversation_id\n          : getConversationId(),\n      });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchConversationList'] });\n        message.success(i18n.t(`message.modified`));\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, updateConversation: mutateAsync };\n};\n\nexport const useRemoveNextConversation = () => {\n  const queryClient = useQueryClient();\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeConversation'],\n    mutationFn: async (conversationIds: string[]) => {\n      const { data } = await chatService.removeConversation({\n        conversationIds,\n        dialogId,\n      });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchConversationList'] });\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, removeConversation: mutateAsync };\n};\n\nexport const useDeleteMessage = () => {\n  const { conversationId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteMessage'],\n    mutationFn: async (messageId: string) => {\n      const { data } = await chatService.deleteMessage({\n        messageId,\n        conversationId,\n      });\n\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n      }\n\n      return data.code;\n    },\n  });\n\n  return { data, loading, deleteMessage: mutateAsync };\n};\n\nexport const useFeedback = () => {\n  const { conversationId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['feedback'],\n    mutationFn: async (params: IFeedbackRequestBody) => {\n      const { data } = await chatService.thumbup({\n        ...params,\n        conversationId,\n      });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.operated`));\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, feedback: mutateAsync };\n};\n\n//#endregion\n\n// #region API provided for external calls\n\nexport const useCreateNextToken = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createToken'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data } = await chatService.createToken(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchTokenList'] });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, createToken: mutateAsync };\n};\n\nexport const useFetchTokenList = (params: Record<string, any>) => {\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IToken[]>({\n    queryKey: ['fetchTokenList', params],\n    initialData: [],\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await chatService.listToken(params);\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useRemoveNextToken = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeToken'],\n    mutationFn: async (params: {\n      tenantId: string;\n      dialogId?: string;\n      tokens: string[];\n    }) => {\n      const { data } = await chatService.removeToken(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchTokenList'] });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, removeToken: mutateAsync };\n};\n\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\n\nconst getDay = (date?: Dayjs) => date?.format('YYYY-MM-DD');\n\nexport const useFetchNextStats = () => {\n  const [pickerValue, setPickerValue] = useState<RangeValue>([\n    dayjs().subtract(7, 'day'),\n    dayjs(),\n  ]);\n  const { data, isFetching: loading } = useQuery<IStats>({\n    queryKey: ['fetchStats', pickerValue],\n    initialData: {} as IStats,\n    gcTime: 0,\n    queryFn: async () => {\n      if (Array.isArray(pickerValue) && pickerValue[0]) {\n        const { data } = await chatService.getStats({\n          fromDate: getDay(pickerValue[0]),\n          toDate: getDay(pickerValue[1] ?? dayjs()),\n        });\n        return data?.data ?? {};\n      }\n      return {};\n    },\n  });\n\n  return { data, loading, pickerValue, setPickerValue };\n};\n\n//#endregion\n\n//#region shared chat\n\nexport const useCreateNextSharedConversation = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createSharedConversation'],\n    mutationFn: async (userId?: string) => {\n      const { data } = await chatService.createExternalConversation({ userId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, createSharedConversation: mutateAsync };\n};\n\n// deprecated\nexport const useFetchNextSharedConversation = (\n  conversationId?: string | null,\n) => {\n  const { data, isPending: loading } = useQuery({\n    queryKey: ['fetchSharedConversation'],\n    enabled: !!conversationId,\n    queryFn: async () => {\n      if (!conversationId) {\n        return {};\n      }\n      const { data } = await chatService.getExternalConversation(\n        null,\n        conversationId,\n      );\n\n      const messageList = buildMessageListWithUuid(data?.data?.message);\n\n      set(data, 'data.message', messageList);\n\n      return data;\n    },\n  });\n\n  return { data, loading };\n};\n\n//#endregion\n\n//#region search page\n\nexport const useFetchMindMap = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchMindMap'],\n    gcTime: 0,\n    mutationFn: async (params: IAskRequestBody) => {\n      try {\n        const ret = await chatService.getMindMap(params);\n        return ret?.data?.data ?? {};\n      } catch (error: any) {\n        if (has(error, 'message')) {\n          message.error(error.message);\n        }\n\n        return [];\n      }\n    },\n  });\n\n  return { data, loading, fetchMindMap: mutateAsync };\n};\n\nexport const useFetchRelatedQuestions = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchRelatedQuestions'],\n    gcTime: 0,\n    mutationFn: async (question: string): Promise<string[]> => {\n      const { data } = await chatService.getRelatedQuestions({ question });\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, fetchRelatedQuestions: mutateAsync };\n};\n//#endregion\n","import { ChatSearchParams, MessageType } from '@/constants/chat';\nimport { fileIconMap } from '@/constants/common';\nimport {\n  useFetchManualConversation,\n  useFetchManualDialog,\n  useFetchNextConversation,\n  useFetchNextConversationList,\n  useFetchNextDialog,\n  useGetChatSearchParams,\n  useRemoveNextConversation,\n  useRemoveNextDialog,\n  useSetNextDialog,\n  useUpdateNextConversation,\n} from '@/hooks/chat-hooks';\nimport {\n  useSetModalState,\n  useShowDeleteConfirm,\n  useTranslate,\n} from '@/hooks/common-hooks';\nimport {\n  useRegenerateMessage,\n  useSelectDerivedMessages,\n  useSendMessageWithSse,\n} from '@/hooks/logic-hooks';\nimport { IConversation, IDialog, Message } from '@/interfaces/database/chat';\nimport { getFileExtension } from '@/utils';\nimport api from '@/utils/api';\nimport { getConversationId } from '@/utils/chat';\nimport { useMutationState } from '@tanstack/react-query';\nimport { get } from 'lodash';\nimport trim from 'lodash/trim';\nimport {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useSearchParams } from 'umi';\nimport { v4 as uuid } from 'uuid';\nimport {\n  IClientConversation,\n  IMessage,\n  VariableTableDataType,\n} from './interface';\n\nexport const useSetChatRouteParams = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const setConversationIsNew = useCallback(\n    (value: string) => {\n      newQueryParameters.set(ChatSearchParams.isNew, value);\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  const getConversationIsNew = useCallback(() => {\n    return newQueryParameters.get(ChatSearchParams.isNew);\n  }, [newQueryParameters]);\n\n  return { setConversationIsNew, getConversationIsNew };\n};\n\nexport const useSetNewConversationRouteParams = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const setNewConversationRouteParams = useCallback(\n    (conversationId: string, isNew: string) => {\n      newQueryParameters.set(ChatSearchParams.ConversationId, conversationId);\n      newQueryParameters.set(ChatSearchParams.isNew, isNew);\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  return { setNewConversationRouteParams };\n};\n\nexport const useSelectCurrentDialog = () => {\n  const data = useMutationState({\n    filters: { mutationKey: ['fetchDialog'] },\n    select: (mutation) => {\n      return get(mutation, 'state.data.data', {});\n    },\n  });\n\n  return (data.at(-1) ?? {}) as IDialog;\n};\n\nexport const useSelectPromptConfigParameters = (): VariableTableDataType[] => {\n  const { data: currentDialog } = useFetchNextDialog();\n\n  const finalParameters: VariableTableDataType[] = useMemo(() => {\n    const parameters = currentDialog?.prompt_config?.parameters ?? [];\n    if (!currentDialog.id) {\n      // The newly created chat has a default parameter\n      return [{ key: uuid(), variable: 'knowledge', optional: false }];\n    }\n    return parameters.map((x) => ({\n      key: uuid(),\n      variable: x.key,\n      optional: x.optional,\n    }));\n  }, [currentDialog]);\n\n  return finalParameters;\n};\n\nexport const useDeleteDialog = () => {\n  const showDeleteConfirm = useShowDeleteConfirm();\n\n  const { removeDialog } = useRemoveNextDialog();\n\n  const onRemoveDialog = (dialogIds: Array<string>) => {\n    showDeleteConfirm({ onOk: () => removeDialog(dialogIds) });\n  };\n\n  return { onRemoveDialog };\n};\n\nexport const useHandleItemHover = () => {\n  const [activated, setActivated] = useState<string>('');\n\n  const handleItemEnter = (id: string) => {\n    setActivated(id);\n  };\n\n  const handleItemLeave = () => {\n    setActivated('');\n  };\n\n  return {\n    activated,\n    handleItemEnter,\n    handleItemLeave,\n  };\n};\n\nexport const useEditDialog = () => {\n  const [dialog, setDialog] = useState<IDialog>({} as IDialog);\n  const { fetchDialog } = useFetchManualDialog();\n  const { setDialog: submitDialog, loading } = useSetNextDialog();\n\n  const {\n    visible: dialogEditVisible,\n    hideModal: hideDialogEditModal,\n    showModal: showDialogEditModal,\n  } = useSetModalState();\n\n  const hideModal = useCallback(() => {\n    setDialog({} as IDialog);\n    hideDialogEditModal();\n  }, [hideDialogEditModal]);\n\n  const onDialogEditOk = useCallback(\n    async (dialog: IDialog) => {\n      const ret = await submitDialog(dialog);\n\n      if (ret === 0) {\n        hideModal();\n      }\n    },\n    [submitDialog, hideModal],\n  );\n\n  const handleShowDialogEditModal = useCallback(\n    async (dialogId?: string) => {\n      if (dialogId) {\n        const ret = await fetchDialog(dialogId);\n        if (ret.code === 0) {\n          setDialog(ret.data);\n        }\n      }\n      showDialogEditModal();\n    },\n    [showDialogEditModal, fetchDialog],\n  );\n\n  const clearDialog = useCallback(() => {\n    setDialog({} as IDialog);\n  }, []);\n\n  return {\n    dialogSettingLoading: loading,\n    initialDialog: dialog,\n    onDialogEditOk,\n    dialogEditVisible,\n    hideDialogEditModal: hideModal,\n    showDialogEditModal: handleShowDialogEditModal,\n    clearDialog,\n  };\n};\n\n//#region conversation\n\nexport const useSelectDerivedConversationList = () => {\n  const { t } = useTranslate('chat');\n\n  const [list, setList] = useState<Array<IConversation>>([]);\n  const { data: currentDialog } = useFetchNextDialog();\n  const { data: conversationList, loading } = useFetchNextConversationList();\n  const { dialogId } = useGetChatSearchParams();\n  const prologue = currentDialog?.prompt_config?.prologue ?? '';\n  const { setNewConversationRouteParams } = useSetNewConversationRouteParams();\n\n  const addTemporaryConversation = useCallback(() => {\n    const conversationId = getConversationId();\n    setList((pre) => {\n      if (dialogId) {\n        setNewConversationRouteParams(conversationId, 'true');\n        const nextList = [\n          {\n            id: conversationId,\n            name: t('newConversation'),\n            dialog_id: dialogId,\n            is_new: true,\n            message: [\n              {\n                content: prologue,\n                role: MessageType.Assistant,\n              },\n            ],\n          } as any,\n          ...conversationList,\n        ];\n        return nextList;\n      }\n\n      return pre;\n    });\n  }, [conversationList, dialogId, prologue, t, setNewConversationRouteParams]);\n\n  // When you first enter the page, select the top conversation card\n\n  useEffect(() => {\n    setList([...conversationList]);\n  }, [conversationList]);\n\n  return { list, addTemporaryConversation, loading };\n};\n\nexport const useSetConversation = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { updateConversation } = useUpdateNextConversation();\n\n  const setConversation = useCallback(\n    async (\n      message: string,\n      isNew: boolean = false,\n      conversationId?: string,\n    ) => {\n      const data = await updateConversation({\n        dialog_id: dialogId,\n        name: message,\n        is_new: isNew,\n        conversation_id: conversationId,\n        message: [\n          {\n            role: MessageType.Assistant,\n            content: message,\n          },\n        ],\n      });\n\n      return data;\n    },\n    [updateConversation, dialogId],\n  );\n\n  return { setConversation };\n};\n\nexport const useSelectNextMessages = () => {\n  const {\n    ref,\n    setDerivedMessages,\n    derivedMessages,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  } = useSelectDerivedMessages();\n  const { data: conversation, loading } = useFetchNextConversation();\n  const { data: dialog } = useFetchNextDialog();\n  const { conversationId, dialogId, isNew } = useGetChatSearchParams();\n\n  const addPrologue = useCallback(() => {\n    if (dialogId !== '' && isNew === 'true') {\n      const prologue = dialog.prompt_config?.prologue;\n\n      const nextMessage = {\n        role: MessageType.Assistant,\n        content: prologue,\n        id: uuid(),\n      } as IMessage;\n\n      setDerivedMessages([nextMessage]);\n    }\n  }, [isNew, dialog, dialogId, setDerivedMessages]);\n\n  useEffect(() => {\n    addPrologue();\n  }, [addPrologue]);\n\n  useEffect(() => {\n    if (\n      conversationId &&\n      isNew !== 'true' &&\n      conversation.message?.length > 0\n    ) {\n      setDerivedMessages(conversation.message);\n    }\n\n    if (!conversationId) {\n      setDerivedMessages([]);\n    }\n  }, [conversation.message, conversationId, setDerivedMessages, isNew]);\n\n  return {\n    ref,\n    derivedMessages,\n    loading,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  };\n};\n\nexport const useHandleMessageInputChange = () => {\n  const [value, setValue] = useState('');\n\n  const handleInputChange: ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n    const value = e.target.value;\n    // const nextValue = value.replaceAll('\\\\n', '\\n').replaceAll('\\\\t', '\\t');\n    setValue(value);\n  };\n\n  return {\n    handleInputChange,\n    value,\n    setValue,\n  };\n};\n\nexport const useSendNextMessage = (controller: AbortController) => {\n  const { setConversation } = useSetConversation();\n  const { conversationId, isNew } = useGetChatSearchParams();\n  const { handleInputChange, value, setValue } = useHandleMessageInputChange();\n\n  const { send, answer, done } = useSendMessageWithSse(\n    api.completeConversation,\n  );\n  const {\n    ref,\n    derivedMessages,\n    loading,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  } = useSelectNextMessages();\n  const { setConversationIsNew, getConversationIsNew } =\n    useSetChatRouteParams();\n\n  const sendMessage = useCallback(\n    async ({\n      message,\n      currentConversationId,\n      messages,\n    }: {\n      message: Message;\n      currentConversationId?: string;\n      messages?: Message[];\n    }) => {\n      const res = await send(\n        {\n          conversation_id: currentConversationId ?? conversationId,\n          messages: [...(messages ?? derivedMessages ?? []), message],\n        },\n        controller,\n      );\n\n      if (res && (res?.response.status !== 200 || res?.data?.code !== 0)) {\n        // cancel loading\n        setValue(message.content);\n        console.info('removeLatestMessage111');\n        removeLatestMessage();\n      }\n    },\n    [\n      derivedMessages,\n      conversationId,\n      removeLatestMessage,\n      setValue,\n      send,\n      controller,\n    ],\n  );\n\n  const handleSendMessage = useCallback(\n    async (message: Message) => {\n      const isNew = getConversationIsNew();\n      if (isNew !== 'true') {\n        sendMessage({ message });\n      } else {\n        const data = await setConversation(\n          message.content,\n          true,\n          conversationId,\n        );\n        if (data.code === 0) {\n          setConversationIsNew('');\n          const id = data.data.id;\n          // currentConversationIdRef.current = id;\n          sendMessage({\n            message,\n            currentConversationId: id,\n            messages: data.data.message,\n          });\n        }\n      }\n    },\n    [\n      setConversation,\n      sendMessage,\n      setConversationIsNew,\n      getConversationIsNew,\n      conversationId,\n    ],\n  );\n\n  const { regenerateMessage } = useRegenerateMessage({\n    removeMessagesAfterCurrentMessage,\n    sendMessage,\n    messages: derivedMessages,\n  });\n\n  useEffect(() => {\n    //  #1289\n    if (answer.answer && conversationId && isNew !== 'true') {\n      addNewestAnswer(answer);\n    }\n  }, [answer, addNewestAnswer, conversationId, isNew]);\n\n  const handlePressEnter = useCallback(\n    (documentIds: string[]) => {\n      if (trim(value) === '') return;\n      const id = uuid();\n\n      addNewestQuestion({\n        content: value,\n        doc_ids: documentIds,\n        id,\n        role: MessageType.User,\n      });\n      if (done) {\n        setValue('');\n        handleSendMessage({\n          id,\n          content: value.trim(),\n          role: MessageType.User,\n          doc_ids: documentIds,\n        });\n      }\n    },\n    [addNewestQuestion, handleSendMessage, done, setValue, value],\n  );\n\n  return {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    setValue,\n    regenerateMessage,\n    sendLoading: !done,\n    loading,\n    ref,\n    derivedMessages,\n    removeMessageById,\n  };\n};\n\nexport const useGetFileIcon = () => {\n  const getFileIcon = (filename: string) => {\n    const ext: string = getFileExtension(filename);\n    const iconPath = fileIconMap[ext as keyof typeof fileIconMap];\n    return `@/assets/svg/file-icon/${iconPath}`;\n  };\n\n  return getFileIcon;\n};\n\nexport const useDeleteConversation = () => {\n  const showDeleteConfirm = useShowDeleteConfirm();\n  const { removeConversation } = useRemoveNextConversation();\n\n  const deleteConversation = (conversationIds: Array<string>) => async () => {\n    const ret = await removeConversation(conversationIds);\n\n    return ret;\n  };\n\n  const onRemoveConversation = (conversationIds: Array<string>) => {\n    showDeleteConfirm({ onOk: deleteConversation(conversationIds) });\n  };\n\n  return { onRemoveConversation };\n};\n\nexport const useRenameConversation = () => {\n  const [conversation, setConversation] = useState<IClientConversation>(\n    {} as IClientConversation,\n  );\n  const { fetchConversation } = useFetchManualConversation();\n  const {\n    visible: conversationRenameVisible,\n    hideModal: hideConversationRenameModal,\n    showModal: showConversationRenameModal,\n  } = useSetModalState();\n  const { updateConversation, loading } = useUpdateNextConversation();\n\n  const onConversationRenameOk = useCallback(\n    async (name: string) => {\n      const ret = await updateConversation({\n        conversation_id: conversation.id,\n        name,\n        is_new: false,\n      });\n\n      if (ret.code === 0) {\n        hideConversationRenameModal();\n      }\n    },\n    [updateConversation, conversation, hideConversationRenameModal],\n  );\n\n  const handleShowConversationRenameModal = useCallback(\n    async (conversationId: string) => {\n      const ret = await fetchConversation(conversationId);\n      if (ret.code === 0) {\n        setConversation(ret.data);\n      }\n      showConversationRenameModal();\n    },\n    [showConversationRenameModal, fetchConversation],\n  );\n\n  return {\n    conversationRenameLoading: loading,\n    initialConversationName: conversation.name,\n    onConversationRenameOk,\n    conversationRenameVisible,\n    hideConversationRenameModal,\n    showConversationRenameModal: handleShowConversationRenameModal,\n  };\n};\n\nexport const useGetSendButtonDisabled = () => {\n  const { dialogId, conversationId } = useGetChatSearchParams();\n\n  return dialogId === '' || conversationId === '';\n};\n\nexport const useSendButtonDisabled = (value: string) => {\n  return trim(value) === '';\n};\n\nexport const useCreateConversationBeforeUploadDocument = () => {\n  const { setConversation } = useSetConversation();\n  const { dialogId } = useGetChatSearchParams();\n  const { getConversationIsNew } = useSetChatRouteParams();\n\n  const createConversationBeforeUploadDocument = useCallback(\n    async (message: string) => {\n      const isNew = getConversationIsNew();\n      if (isNew === 'true') {\n        const data = await setConversation(message, true);\n\n        return data;\n      }\n    },\n    [setConversation, getConversationIsNew],\n  );\n\n  return {\n    createConversationBeforeUploadDocument,\n    dialogId,\n  };\n};\n//#endregion\n","import { MessageType, SharedFrom } from '@/constants/chat';\nimport { useCreateNextSharedConversation } from '@/hooks/chat-hooks';\nimport {\n  useSelectDerivedMessages,\n  useSendMessageWithSse,\n} from '@/hooks/logic-hooks';\nimport { Message } from '@/interfaces/database/chat';\nimport { message } from 'antd';\nimport { get } from 'lodash';\nimport trim from 'lodash/trim';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'umi';\nimport { v4 as uuid } from 'uuid';\nimport { useHandleMessageInputChange } from './hooks';\n\nconst isCompletionError = (res: any) =>\n  res && (res?.response.status !== 200 || res?.data?.code !== 0);\n\nexport const useSendButtonDisabled = (value: string) => {\n  return trim(value) === '';\n};\n\nexport const useGetSharedChatSearchParams = () => {\n  const [searchParams] = useSearchParams();\n  const data_prefix = 'data_';\n  const data = Object.fromEntries(\n    searchParams\n      .entries()\n      .filter(([key, value]) => key.startsWith(data_prefix))\n      .map(([key, value]) => [key.replace(data_prefix, ''), value]),\n  );\n  return {\n    from: searchParams.get('from') as SharedFrom,\n    sharedId: searchParams.get('shared_id'),\n    locale: searchParams.get('locale'),\n    data: data,\n    visibleAvatar: searchParams.get('visible_avatar')\n      ? searchParams.get('visible_avatar') !== '1'\n      : true,\n  };\n};\n\nexport const useSendSharedMessage = () => {\n  const {\n    from,\n    sharedId: conversationId,\n    data: data,\n  } = useGetSharedChatSearchParams();\n  const { createSharedConversation: setConversation } =\n    useCreateNextSharedConversation();\n  const { handleInputChange, value, setValue } = useHandleMessageInputChange();\n  const { send, answer, done } = useSendMessageWithSse(\n    `/api/v1/${from === SharedFrom.Agent ? 'agentbots' : 'chatbots'}/${conversationId}/completions`,\n  );\n  const {\n    derivedMessages,\n    ref,\n    removeLatestMessage,\n    addNewestAnswer,\n    addNewestQuestion,\n  } = useSelectDerivedMessages();\n  const [hasError, setHasError] = useState(false);\n\n  const sendMessage = useCallback(\n    async (message: Message, id?: string) => {\n      const res = await send({\n        conversation_id: id ?? conversationId,\n        quote: true,\n        question: message.content,\n        session_id: get(derivedMessages, '0.session_id'),\n      });\n\n      if (isCompletionError(res)) {\n        // cancel loading\n        setValue(message.content);\n        removeLatestMessage();\n      }\n    },\n    [send, conversationId, derivedMessages, setValue, removeLatestMessage],\n  );\n\n  const handleSendMessage = useCallback(\n    async (message: Message) => {\n      if (conversationId !== '') {\n        sendMessage(message);\n      } else {\n        const data = await setConversation('user id');\n        if (data.code === 0) {\n          const id = data.data.id;\n          sendMessage(message, id);\n        }\n      }\n    },\n    [conversationId, setConversation, sendMessage],\n  );\n\n  const fetchSessionId = useCallback(async () => {\n    const payload = { question: '' };\n    const ret = await send({ ...payload, ...data });\n    if (isCompletionError(ret)) {\n      message.error(ret?.data.message);\n      setHasError(true);\n    }\n  }, [send]);\n\n  useEffect(() => {\n    fetchSessionId();\n  }, [fetchSessionId, send]);\n\n  useEffect(() => {\n    if (answer.answer) {\n      addNewestAnswer(answer);\n    }\n  }, [answer, addNewestAnswer]);\n\n  const handlePressEnter = useCallback(\n    (documentIds: string[]) => {\n      if (trim(value) === '') return;\n      const id = uuid();\n      if (done) {\n        setValue('');\n        addNewestQuestion({\n          content: value,\n          doc_ids: documentIds,\n          id,\n          role: MessageType.User,\n        });\n        handleSendMessage({\n          content: value.trim(),\n          id,\n          role: MessageType.User,\n        });\n      }\n    },\n    [addNewestQuestion, done, handleSendMessage, setValue, value],\n  );\n\n  return {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    sendLoading: !done,\n    ref,\n    loading: false,\n    derivedMessages,\n    hasError,\n  };\n};\n","import api from '@/utils/api';\nimport registerServer from '@/utils/register-server';\nimport request from '@/utils/request';\n\nconst {\n  getDialog,\n  setDialog,\n  listDialog,\n  removeDialog,\n  getConversation,\n  getConversationSSE,\n  setConversation,\n  completeConversation,\n  listConversation,\n  removeConversation,\n  createToken,\n  listToken,\n  removeToken,\n  getStats,\n  createExternalConversation,\n  getExternalConversation,\n  completeExternalConversation,\n  uploadAndParseExternal,\n  deleteMessage,\n  thumbup,\n  tts,\n  ask,\n  mindmap,\n  getRelatedQuestions,\n} = api;\n\nconst methods = {\n  getDialog: {\n    url: getDialog,\n    method: 'get',\n  },\n  setDialog: {\n    url: setDialog,\n    method: 'post',\n  },\n  removeDialog: {\n    url: removeDialog,\n    method: 'post',\n  },\n  listDialog: {\n    url: listDialog,\n    method: 'get',\n  },\n  listConversation: {\n    url: listConversation,\n    method: 'get',\n  },\n  getConversation: {\n    url: getConversation,\n    method: 'get',\n  },\n  getConversationSSE: {\n    url: getConversationSSE,\n    method: 'get',\n  },\n  setConversation: {\n    url: setConversation,\n    method: 'post',\n  },\n  completeConversation: {\n    url: completeConversation,\n    method: 'post',\n  },\n  removeConversation: {\n    url: removeConversation,\n    method: 'post',\n  },\n  createToken: {\n    url: createToken,\n    method: 'post',\n  },\n  listToken: {\n    url: listToken,\n    method: 'get',\n  },\n  removeToken: {\n    url: removeToken,\n    method: 'post',\n  },\n  getStats: {\n    url: getStats,\n    method: 'get',\n  },\n  createExternalConversation: {\n    url: createExternalConversation,\n    method: 'get',\n  },\n  getExternalConversation: {\n    url: getExternalConversation,\n    method: 'get',\n  },\n  completeExternalConversation: {\n    url: completeExternalConversation,\n    method: 'post',\n  },\n  uploadAndParseExternal: {\n    url: uploadAndParseExternal,\n    method: 'post',\n  },\n  deleteMessage: {\n    url: deleteMessage,\n    method: 'post',\n  },\n  thumbup: {\n    url: thumbup,\n    method: 'post',\n  },\n  tts: {\n    url: tts,\n    method: 'post',\n  },\n  ask: {\n    url: ask,\n    method: 'post',\n  },\n  getMindMap: {\n    url: mindmap,\n    method: 'post',\n  },\n  getRelatedQuestions: {\n    url: getRelatedQuestions,\n    method: 'post',\n  },\n} as const;\n\nconst chatService = registerServer<keyof typeof methods>(methods, request);\n\nexport default chatService;\n","/**\n * @param  {String}  url\n * @param  {Boolean} isNoCaseSensitive 是否区分大小写\n * @return {Object}\n */\n// import numeral from 'numeral';\n\nimport { Base64 } from 'js-base64';\nimport JSEncrypt from 'jsencrypt';\n\nexport const getWidth = () => {\n  return { width: window.innerWidth };\n};\nexport const rsaPsw = (password: string) => {\n  const pub =\n    '-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArq9XTUSeYr2+N1h3Afl/z8Dse/2yD0ZGrKwx+EEEcdsBLca9Ynmx3nIB5obmLlSfmskLpBo0UACBmB5rEjBp2Q2f3AG3Hjd4B+gNCG6BDaawuDlgANIhGnaTLrIqWrrcm4EMzJOnAOI1fgzJRsOOUEfaS318Eq9OVO3apEyCCt0lOQK6PuksduOjVxtltDav+guVAA068NrPYmRNabVKRNLJpL8w4D44sfth5RvZ3q9t+6RTArpEtc5sh5ChzvqPOzKGMXW83C95TxmXqpbK6olN4RevSfVjEAgCydH6HN6OhtOQEcnrU97r9H0iZOWwbw3pVrZiUkuRD1R56Wzs2wIDAQAB-----END PUBLIC KEY-----';\n  const encryptor = new JSEncrypt();\n\n  encryptor.setPublicKey(pub);\n\n  return encryptor.encrypt(Base64.encode(password));\n};\n\nexport default {\n  getWidth,\n  rsaPsw,\n};\n\nexport const getFileExtension = (filename: string) =>\n  filename.slice(filename.lastIndexOf('.') + 1).toLowerCase();\n"],"names":["useClickDialogCard","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","setSearchParams","newQueryParameters","useMemo","URLSearchParams","handleClickDialog","useCallback","dialogId","set","ChatSearchParams","DialogId","useClickConversationCard","_useSearchParams3","_useSearchParams4","currentQueryParameters","toString","handleClickConversation","conversationId","isNew","ConversationId","useGetChatSearchParams","_useSearchParams5","get","useFetchNextDialogList","_queryFn","_useQuery","useQuery","queryKey","initialData","gcTime","refetchOnWindowFocus","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$data","_len","params","_key","_yield$chatService$li","data","list","_args","arguments","wrap","_context","prev","next","length","Array","console","log","chatService","listDialog","sent","code","every","x","id","history","push","abrupt","stop","apply","loading","isFetching","refetch","useFetchChatAppList","_queryFn2","_useQuery2","_callee2","_data$data2","_yield$chatService$li2","_context2","useSetNextDialog","_mutationFn","queryClient","useQueryClient","_useMutation","useMutation","mutationKey","mutationFn","_callee3","_yield$chatService$se","_context3","setDialog","invalidateQueries","exact","message","success","i18n","t","concat","dialog_id","_x","isPending","mutateAsync","useFetchNextDialog","_queryFn3","_useQuery3","enabled","_callee4","_data$data3","_yield$chatService$ge","_context4","getDialog","useFetchManualDialog","_mutationFn2","_useMutation2","_callee5","_yield$chatService$ge2","_context5","_x2","fetchDialog","useRemoveNextDialog","_mutationFn3","_useMutation3","_callee6","dialogIds","_yield$chatService$re","_context6","removeDialog","_x3","useFetchNextConversationList","_queryFn4","_useQuery4","_callee7","_yield$chatService$li3","_context7","listConversation","useFetchNextConversation","_queryFn5","_useGetChatSearchPara4","sharedId","useGetSharedChatSearchParams","_useQuery5","_callee8","_data$data4","_yield$chatService$ge3","_data","conversation","messageList","_context8","isConversationIdExist","getConversation","buildMessageListWithUuid","_objectSpread","useFetchNextConversationSSE","_queryFn6","_useQuery6","_callee9","_data2$data","_yield$chatService$ge4","_data2","_context9","getConversationSSE","useFetchManualConversation","_mutationFn4","_useMutation4","_callee10","_yield$chatService$ge5","_context10","_x4","fetchConversation","useUpdateNextConversation","_mutationFn5","_useMutation5","_callee11","_yield$chatService$se2","_context11","setConversation","conversation_id","getConversationId","_x5","updateConversation","useRemoveNextConversation","_mutationFn6","_useMutation6","_callee12","conversationIds","_yield$chatService$re2","_context12","removeConversation","_x6","useDeleteMessage","_mutationFn7","_useMutation7","_callee13","messageId","_yield$chatService$de","_context13","deleteMessage","_x7","useFeedback","_mutationFn8","_useMutation8","_callee14","_yield$chatService$th","_context14","thumbup","_x8","feedback","useCreateNextSharedConversation","_mutationFn11","_useMutation11","_callee19","userId","_yield$chatService$cr2","_context19","createExternalConversation","_x11","createSharedConversation","useFetchMindMap","_mutationFn12","_useMutation12","_callee21","_ret$data$data","_ret$data","ret","_context21","getMindMap","t0","has","error","_x12","fetchMindMap","useFetchRelatedQuestions","_mutationFn13","_useMutation13","_callee22","question","_data$data9","_yield$chatService$ge8","_context22","getRelatedQuestions","_x13","fetchRelatedQuestions","useSetChatRouteParams","setConversationIsNew","value","getConversationIsNew","useSelectPromptConfigParameters","currentDialog","_currentDialog$prompt","_currentDialog$prompt2","parameters","prompt_config","map","key","uuid","variable","optional","useDeleteDialog","showDeleteConfirm","useShowDeleteConfirm","onRemoveDialog","onOk","useHandleItemHover","_useState","useState","_useState2","activated","setActivated","handleItemEnter","handleItemLeave","useEditDialog","_useState3","_useState4","dialog","_useSetNextDialog","submitDialog","_useSetModalState","useSetModalState","dialogEditVisible","visible","hideDialogEditModal","hideModal","showDialogEditModal","showModal","onDialogEditOk","_ref","handleShowDialogEditModal","_ref2","clearDialog","dialogSettingLoading","initialDialog","useSelectDerivedConversationList","_currentDialog$prompt3","_currentDialog$prompt4","useTranslate","_useState5","_useState6","setList","_useFetchNextConversa","conversationList","prologue","setNewConversationRouteParams","addTemporaryConversation","pre","name","is_new","content","role","MessageType","Assistant","_toConsumableArray","useEffect","useSetConversation","_ref3","_args3","undefined","useHandleMessageInputChange","_useState7","_useState8","setValue","handleInputChange","e","target","useSendNextMessage","controller","_useHandleMessageInpu","_useSendMessageWithSs","useSendMessageWithSse","api","completeConversation","send","answer","done","_useSelectNextMessage","_useSelectDerivedMess","useSelectDerivedMessages","ref","setDerivedMessages","derivedMessages","addNewestAnswer","addNewestQuestion","removeLatestMessage","removeMessageById","removeMessagesAfterCurrentMessage","_useFetchNextConversa2","_useGetChatSearchPara3","addPrologue","_dialog$prompt_config","nextMessage","_conversation$message","useSelectNextMessages","_useSetChatRouteParam","sendMessage","_ref5","_ref4","_ref6","_res$data","currentConversationId","messages","res","response","status","info","handleSendMessage","_ref7","regenerateMessage","useRegenerateMessage","handlePressEnter","documentIds","trim","doc_ids","User","sendLoading","useGetFileIcon","filename","ext","getFileExtension","iconPath","fileIconMap","useDeleteConversation","deleteConversation","onRemoveConversation","useRenameConversation","_useState9","_useState10","_useSetModalState2","conversationRenameVisible","hideConversationRenameModal","showConversationRenameModal","_useUpdateNextConvers2","onConversationRenameOk","_ref9","handleShowConversationRenameModal","_ref10","conversationRenameLoading","initialConversationName","useGetSendButtonDisabled","_useGetChatSearchPara5","useSendButtonDisabled","useCreateConversationBeforeUploadDocument","createConversationBeforeUploadDocument","_ref11","isCompletionError","searchParams","data_prefix","Object","fromEntries","entries","filter","startsWith","replace","from","locale","visibleAvatar","useSendSharedMessage","_useGetSharedChatSear","SharedFrom","Agent","hasError","setHasError","quote","session_id","fetchSessionId","payload","methods","url","method","createToken","listToken","removeToken","getStats","getExternalConversation","completeExternalConversation","uploadAndParseExternal","tts","ask","mindmap","registerServer","request","getWidth","width","window","innerWidth","rsaPsw","password","encryptor","JSEncrypt","setPublicKey","encrypt","Base64","encode","slice","lastIndexOf","toLowerCase"],"sourceRoot":""}