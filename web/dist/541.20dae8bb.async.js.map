{"version":3,"file":"541.20dae8bb.async.js","mappings":"gUAAYA,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,kBAAjBA,EAAiB,kBAAjBA,EAAiB,8BAAjBA,EAAiB,gCAAjBA,CAAiB,MASjBC,EAAa,SAAbA,GAAa,OAAbA,EAAa,YAAbA,EAAa,YAAbA,EAAa,WAAbA,EAAa,SAAbA,EAAa,SAAbA,CAAa,MAQbC,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,sBAAjBA,EAAiB,kBAAjBA,EAAiB,kBAAjBA,CAAiB,MAMhBC,EAAuBC,IAAAA,IAAAA,IAAA,GACjCF,EAAkBG,UAAY,CAC7BC,YAAa,GACbC,MAAO,GACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,MAEbR,EAAkBS,QAAU,CAC3BL,YAAa,GACbC,MAAO,GACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,MAEbR,EAAkBU,QAAU,CAC3BN,YAAa,GACbC,MAAO,GACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,MAIJG,EAAY,SAAZA,GAAY,OAAZA,EAAY,sBAAZA,EAAY,YAAZA,EAAY,wBAAZA,EAAY,0BAAZA,EAAY,gBAAZA,EAAY,UAAZA,CAAY,MASZC,EAAqB,SAArBA,GAAqB,OAArBA,EAAqB,oBAArBA,EAAqB,iBAArBA,CAAqB,MAKrBC,EAAY,SAAZA,GAAY,OAAZA,EAAY,kBAAZA,EAAY,gBAAZA,CAAY,MAKZC,EAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,cAAlBA,EAAkB,QAAlBA,EAAkB,gBAAlBA,EAAkB,gBAAlBA,EAAkB,cAAlBA,EAAkB,cAAlBA,EAAkB,YAAlBA,EAAkB,YAAlBA,EAAkB,4BAAlBA,EAAkB,kBAAlBA,EAAkB,UAAlBA,EAAkB,cAAlBA,EAAkB,cAAlBA,EAAkB,UAAlBA,EAAkB,iCAAlBA,CAAkB,K,krBCrCjBC,EAAqB,WAChC,IAAAC,GAAuBC,EAAAA,EAAAA,MAGvB,OAHwCC,IAAAF,EAAA,GAArB,GACkBG,IAAI,OAEf,EAC5B,EAEaC,EAAqC,WAChD,IAMSC,EANHC,EAAkBP,IAExBQ,GAAsCC,EAAAA,EAAAA,GAAqB,CACzDC,SAAU,CAAC,wBACXC,YAAa,CAAC,EACdC,OAAQ,EACRC,SAAOP,EAAAQ,IAAAC,MAAAC,MAAE,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,MAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACgBC,EAAAA,GAAUC,cAAc,CAC7CC,MAAOpB,IACP,OAFU,OAEVY,EAAAG,EAAAM,KAFMR,EAAID,EAAJC,KAAIE,EAAAO,OAAA,SAGK,QAHLX,EAGLE,aAAI,EAAJA,EAAMA,YAAI,IAAAF,EAAAA,EAAI,CAAC,GAAC,wBAAAI,EAAAQ,OAAA,GAAAb,EAAA,KACxB,kBAAAX,EAAAyB,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAZGZ,EAAJY,KAYOa,QAZkBzB,EAAnB0B,WAahB,EAEaC,EAAwB,WAKhC,IAKMC,EATTC,EAAwCL,UAAAM,OAAA,QAAAC,IAAAP,UAAA,IAAAA,UAAA,GAKxCQ,GAAsC/B,EAAAA,EAAAA,GAAS,CAC7CC,SAAU,CAAC,sBACXC,YAAa,GACbC,OAAQ,EACRC,SAAOuB,EAAAtB,IAAAC,MAAAC,MAAE,SAAAyB,IAAA,IAAAC,EAAAC,EAAAC,EAAAxB,EAAAyB,EAAA,OAAA9B,MAAAM,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAtB,KAAA,EACgBC,EAAAA,GAAUsB,UAAS,OACR,OADQH,EAAAE,EAAAlB,KAAlCR,EAAIwB,EAAJxB,KACFyB,EAAsB,QAAlBH,EAAGtB,SAAU,QAANuB,EAAJvB,EAAMA,YAAI,IAAAuB,OAAA,EAAVA,EAAYK,WAAG,IAAAN,EAAAA,EAAI,GAAEI,EAAAjB,OAAA,SAC3BQ,EACHQ,EAAKI,QAAO,SAACC,GAAa,OAAKA,EAAEC,UAAY,CAAC,IAC9CN,GAAI,wBAAAC,EAAAhB,OAAA,GAAAW,EAAA,KACT,kBAAAL,EAAAL,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEa,KAbGL,EAAJpB,KAaaa,QAbYO,EAAnBN,WAchB,EAEakB,EAA4B,WACvC,IAAQP,EAASV,IAATU,KAOR,OALgBA,aAAI,EAAJA,EAAMQ,KAAI,SAACC,GAAI,MAAM,CACnCC,MAAOD,EAAKE,KACZC,MAAOH,EAAKI,GACb,GAGH,EAEaC,EAAgC,WAC3C,IAcSC,EAdTC,GAA4CC,EAAAA,EAAAA,MAApCC,EAAYF,EAAZE,aAAcC,EAAiBH,EAAjBG,kBAChBC,GAAwBC,EAAAA,EAAAA,GAAYH,EAAc,CAAEI,KAAM,MAGhEC,GAQIC,EAAAA,EAAAA,GAAiB,CACnB3D,SAAU,CAAC,6BAA8BuD,GACzCpD,SAAO+C,EAAA9C,IAAAC,MAAAC,MAAE,SAAAsD,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAtD,EAAAyB,EAAA,OAAA9B,MAAAM,MAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAAkB,OAATiD,EAASF,EAATE,UAASE,EAAAnD,KAAA,EACFC,EAAAA,GAAUsB,QAAQ,CACvC6B,KAAMH,EACNI,UAdW,GAeXC,SAAUb,IACV,OAC2B,OAD3BS,EAAAC,EAAA/C,KAJMR,EAAIsD,EAAJtD,KAKFyB,EAAiB,QAAb2B,EAAGpD,aAAI,EAAJA,EAAMA,YAAI,IAAAoD,EAAAA,EAAI,GAAEG,EAAA9C,OAAA,SACtBgB,GAAI,wBAAA8B,EAAA7C,OAAA,GAAAwC,EAAA,KACZ,SAAAS,GAAA,OAAAnB,EAAA7B,MAAA,KAAAC,UAAA,GACDgD,iBAAkB,EAClBC,iBAAkB,SAACC,EAAUC,EAAOC,GAClC,GAtBa,GAsBTA,GAA4BF,EAASG,MACvC,OAAOD,EAAgB,CAG3B,IAxBAhE,EAAIgD,EAAJhD,KACAkE,EAAKlB,EAALkB,MACAC,EAAanB,EAAbmB,cACAC,EAAWpB,EAAXoB,YACAtD,EAAUkC,EAAVlC,WAsBF,MAAO,CACLd,KAAAA,EACAa,QAASC,EACToD,MAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAtD,WAAAA,EACAuD,mBA5BkBrB,EAAlBqB,mBA6BAC,OA5BMtB,EAANsB,OA6BA1B,kBAAAA,EACAD,aAAAA,EAEJ,EAEa4B,EAAqB,WAChC,IAOYC,EAPNC,GAAcC,EAAAA,EAAAA,MACpBC,GAIIC,EAAAA,EAAAA,GAAY,CACdC,YAAa,CAAC,mBACdC,YAAUN,EAAA9E,IAAAC,MAAAC,MAAE,SAAAmF,EAAOC,GAAqC,IAAAC,EAAAC,EAAAlF,EAAA,OAAAL,MAAAM,MAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,cAAA+E,EAAA/E,KAAA,EAC1BC,EAAAA,GAAU+E,SAASJ,GAAO,OAMrD,OANqDC,EAAAE,EAAA3E,KAAA0E,EAAAD,EAA9CjF,KACU,KADVA,OAAI,IAAAkF,EAAG,CAAC,EAACA,GACRG,OACPC,EAAAA,GAAQC,QACNC,EAAAA,EAAKC,EAAE,WAADC,OAAYV,SAAAA,EAAQ1C,GAAK,WAAa,aAE9CmC,EAAYkB,kBAAkB,CAAErG,SAAU,CAAC,yBAC5C6F,EAAA1E,OAAA,SACMT,GAAI,wBAAAmF,EAAAzE,OAAA,GAAAqE,EAAA,KACZ,SAAAa,GAAA,OAAApB,EAAA7D,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAjBH2E,EAAJ3E,KAiBaa,QAhBK8D,EAAlBkB,UAgBsBC,gBAfXnB,EAAXoB,YAgBJ,EAEaC,EAAqB,WAChC,IAOYC,EAPNxB,GAAcC,EAAAA,EAAAA,MACpBwB,GAIItB,EAAAA,EAAAA,GAAY,CACdC,YAAa,CAAC,mBACdC,YAAUmB,EAAAvG,IAAAC,MAAAC,MAAE,SAAAuG,EAAO7D,GAAU,IAAA8D,EAAAC,EAAArG,EAAA,OAAAL,MAAAM,MAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,cAAAkG,EAAAlG,KAAA,EACJC,EAAAA,GAAUkG,KAAK,CAAEhG,MAAO+B,IAAK,OAMnD,OANmD+D,EAAAC,EAAA9F,KAClC,KADVR,EAAIqG,EAAJrG,MACCqF,OACPC,EAAAA,GAAQC,QAAQC,EAAAA,EAAKC,EAAE,oBACvBhB,EAAYkB,kBAAkB,CAC5BrG,SAAU,CAAC,iCAEdgH,EAAA7F,OAAA,SACgB,QADhB2F,EACMpG,aAAI,EAAJA,EAAMA,YAAI,IAAAoG,EAAAA,EAAI,IAAE,wBAAAE,EAAA5F,OAAA,GAAAyF,EAAA,KACxB,SAAAK,GAAA,OAAAP,EAAAtF,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAjBHkG,EAAJlG,KAiBaa,QAhBKqF,EAAlBL,UAgBsBY,gBAfXP,EAAXH,YAgBJ,EAIaW,EAAqB,WAChC,IAQYC,EARNxH,EAAkBP,IAClB6F,GAAcC,EAAAA,EAAAA,MACpBkC,GAIIhC,EAAAA,EAAAA,GAAY,CACdC,YAAa,CAAC,iBACdC,YAAU6B,EAAAjH,IAAAC,MAAAC,MAAE,SAAAiH,EAAO7B,GAA2B,IAAA8B,EAAAC,EAAA/G,EAAA,OAAAL,MAAAM,MAAA,SAAA+G,GAAA,cAAAA,EAAA7G,KAAA6G,EAAA5G,MAAA,cAAA4G,EAAA5G,KAAA,EAChBC,EAAAA,GAAU4G,SAAQC,IAAC,CAC7C3G,MAAOpB,GACJ6F,IACH,OAID,OAJC8B,EAAAE,EAAAxG,KAAAuG,EAAAD,EAHM9G,KAIU,KAJVA,OAAI,IAAA+G,EAAG,CAAC,EAACA,GAIR1B,OACPC,EAAAA,GAAQC,QAAQC,EAAAA,EAAKC,EAAE,oBACvBhB,EAAYkB,kBAAkB,CAAErG,SAAU,CAAC,2BAC5C0H,EAAAvG,OAAA,SACMT,GAAI,wBAAAgH,EAAAtG,OAAA,GAAAmG,EAAA,KACZ,SAAAM,GAAA,OAAAR,EAAAhG,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAlBH4G,EAAJ5G,KAkBaa,QAjBK+F,EAAlBf,UAiBsBuB,2BAhBXR,EAAXb,YAiBJ,EAMasB,EAAwB,WAGnC,IAUYC,EAVNnI,EAAkBP,IACxB2I,GAAiCC,EAAAA,EAAAA,MAAzBhE,EAAI+D,EAAJ/D,KAAYiE,EAAQF,EAAdG,KAEdC,GAII/C,EAAAA,EAAAA,GAAY,CACdC,YAAa,CAAC,aACdrF,OAAQ,EACRsF,YAAUwC,EAAA5H,IAAAC,MAAAC,MAAE,SAAAgI,EAAOC,GAAW,IAAAC,EAAAC,EAAAC,EAAAhI,EAAAiI,EAAA,OAAAtI,MAAAM,MAAA,SAAAiI,GAAA,cAAAA,EAAA/H,KAAA+H,EAAA9H,MAAA,cAAA8H,EAAA9H,KAAA,EACLC,EAAAA,GAAU8H,eAAcjB,IAAAA,IAAC,CAAC,EAC5CW,GAAM,IACTtH,MAAmB,QAAduH,EAAED,EAAOtH,aAAK,IAAAuH,EAAAA,EAAI3I,EACvBqE,KAAAA,EACAkE,KAAMD,KACN,OALU,GAKVO,EAAAE,EAAA1H,KACgB,KANVR,EAAIgI,EAAJhI,MAMCqF,KAAU,CAAA6C,EAAA9H,KAAA,QACI,OAAf6H,EAAMjI,EAAKA,KAAIkI,EAAAzH,OAAA,SAAAyG,IAAAA,IAAA,GAEhBe,GAAG,IACNG,UAAWH,EAAII,YAAQ,cAAAH,EAAAzH,OAAA,SAIf,QAJesH,EAIzB/H,aAAI,EAAJA,EAAMA,YAAI,IAAA+H,EAAAA,EAAI,CACZO,OAAQ,GACRF,UAAW,GACXnE,MAAO,IACR,wBAAAiE,EAAAxH,OAAA,GAAAkH,EAAA,KAEJ,SAAAW,GAAA,OAAAjB,EAAA3G,MAAA,KAAAC,UAAA,KA3BDZ,EAAI2H,EAAJ3H,KA8BF,MAAO,CACLA,KAAMA,QAAAA,EAAQ,CAAEsI,OAAQ,GAAIF,UAAW,GAAInE,MAAO,GAClDpD,QA/BkB8G,EAAlB9B,UAgCA2C,UA/BWb,EAAX5B,YAiCJ,EAEa0C,EAAoB,WAC/B,OAAOC,EAAAA,EAAAA,GAAc,CAAE7D,YAAa,CAAC,eAAkB,CACzD,EAEa8D,EAAyB,WAAsB,IAAAC,EAO1D,OAAmB,QAAnBA,GANaC,EAAAA,EAAAA,GAAiB,CAC5BC,QAAS,CAAEjE,YAAa,CAAC,cACzBkE,OAAQ,SAACC,GACP,OAAOA,EAASC,MAAMjJ,IACxB,IAEWkJ,IAAI,UAAE,IAAAN,EAAAA,EAAI,CACrBN,OAAQ,GACRF,UAAW,GACXnE,MAAO,EAEX,EAEakF,EAA4B,WAOvC,MAAyB,aANVN,EAAAA,EAAAA,GAAiB,CAC9BC,QAAS,CAAEjE,YAAa,CAAC,cACzBkE,OAAQ,SAACC,GACP,OAAOA,EAASC,MAAM3E,MACxB,IAEY4E,IAAI,EACpB,EAKaE,EAAkB,WAC7B,IAMSC,EANHlK,EAAkBP,IAExB0K,GAAsCjK,EAAAA,EAAAA,GAAkC,CACtEC,SAAU,CAAC,gBACXC,YAAa,GACbC,OAAQ,EACRC,SAAO4J,EAAA3J,IAAAC,MAAAC,MAAE,SAAA2J,IAAA,IAAAC,EAAAxJ,EAAAyB,EAAA,OAAA9B,MAAAM,MAAA,SAAAwJ,GAAA,cAAAA,EAAAtJ,KAAAsJ,EAAArJ,MAAA,cAAAqJ,EAAArJ,KAAA,GACgBsJ,EAAAA,EAAAA,IAAQvK,GAAgB,OAClB,OADkBqK,EAAAC,EAAAjJ,KAAvCR,EAAIwJ,EAAJxJ,KACFyB,GAAOzB,aAAI,EAAJA,EAAMA,OAAQ,GAAEyJ,EAAAhJ,OAAA,SACtBgB,GAAI,wBAAAgI,EAAA/I,OAAA,GAAA6I,EAAA,KACZ,kBAAAF,EAAA1I,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEa,KAXG6H,EAAJtJ,KAWaa,QAXYyI,EAAnBxI,WAYhB,EAEa6I,EAAe,WAC1B,IASYC,EATNzK,EAAkBP,IAElB6F,GAAcC,EAAAA,EAAAA,MACpBmF,GAIIjF,EAAAA,EAAAA,GAAY,CACdC,YAAa,CAAC,aACdC,YAAU8E,EAAAlK,IAAAC,MAAAC,MAAE,SAAAkK,EAAOC,GAAc,IAAAC,EAAAC,EAAAjK,EAAA,OAAAL,MAAAM,MAAA,SAAAiK,GAAA,cAAAA,EAAA/J,KAAA+J,EAAA9J,MAAA,cAAA8J,EAAA9J,KAAA,GACR+J,EAAAA,EAAAA,IAAUhL,EAAiB4K,GAAK,OAMtD,OANsDE,EAAAC,EAAA1J,KACrC,KADVR,EAAIiK,EAAJjK,MACCqF,OACPC,EAAAA,GAAQC,QAAQC,EAAAA,EAAKC,EAAE,oBACvBhB,EAAYkB,kBAAkB,CAC5BrG,SAAU,CAAC,mBAEd4K,EAAAzJ,OAAA,SACgB,QADhBuJ,EACMhK,aAAI,EAAJA,EAAMA,YAAI,IAAAgK,EAAAA,EAAI,IAAE,wBAAAE,EAAAxJ,OAAA,GAAAoJ,EAAA,KACxB,SAAAM,GAAA,OAAAR,EAAAjJ,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAjBH6J,EAAJ7J,KAiBaa,QAhBKgJ,EAAlBhE,UAgBsBwE,UAfXR,EAAX9D,YAgBJ,EAEauE,EAAe,WAC1B,IASYC,EATNpL,EAAkBP,IAElB6F,GAAcC,EAAAA,EAAAA,MACpB8F,GAII5F,EAAAA,EAAAA,GAAY,CACdC,YAAa,CAAC,aACdC,YAAUyF,EAAA7K,IAAAC,MAAAC,MAAE,SAAA6K,EAAOzF,GAAkB,IAAA0F,EAAAC,EAAA3K,EAAA,OAAAL,MAAAM,MAAA,SAAA2K,GAAA,cAAAA,EAAAzK,KAAAyK,EAAAxK,MAAA,cAAAwK,EAAAxK,KAAA,GACZyK,EAAAA,EAAAA,IAAU1L,EAAiB6F,GAAO,OAMxD,OANwD2F,EAAAC,EAAApK,KACvC,KADVR,EAAI2K,EAAJ3K,MACCqF,OACPC,EAAAA,GAAQC,QAAQC,EAAAA,EAAKC,EAAE,qBACvBhB,EAAYkB,kBAAkB,CAC5BrG,SAAU,CAAC,mBAEdsL,EAAAnK,OAAA,SACgB,QADhBiK,EACM1K,aAAI,EAAJA,EAAMA,YAAI,IAAA0K,EAAAA,EAAI,IAAE,wBAAAE,EAAAlK,OAAA,GAAA+J,EAAA,KACxB,SAAAK,GAAA,OAAAP,EAAA5J,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAjBHwK,EAAJxK,KAiBaa,QAhBK2J,EAAlB3E,UAgBsBgF,UAfXL,EAAXzE,YAgBJ,EAEagF,EAAmB,WAC9B,OAAOrC,EAAAA,EAAAA,GAAc,CAAE7D,YAAa,CAAC,eAAkB,CACzD,EAEamG,EAAgC,WAC3C,IAOSC,EAPTC,GAAwCC,EAAAA,EAAAA,UAAmB,IAAGC,EAAArM,IAAAmM,EAAA,GAAvDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAEpCG,GAAsClM,EAAAA,EAAAA,GAAkC,CACtEC,SAAU,CAAC,8BACXkM,QAASH,EAAanK,OAAS,EAC/B3B,YAAa,GACbC,OAAQ,EACRC,SAAOwL,EAAAvL,IAAAC,MAAAC,MAAE,SAAA6L,IAAA,IAAAC,EAAA1L,EAAAyB,EAAA,OAAA9B,MAAAM,MAAA,SAAA0L,GAAA,cAAAA,EAAAxL,KAAAwL,EAAAvL,MAAA,cAAAuL,EAAAvL,KAAA,EACgBC,EAAAA,GAAUuL,sBAAsB,CACrDC,OAAQR,EAAaS,KAAK,OAC1B,OAC2B,OAD3BJ,EAAAC,EAAAnL,KAFMR,EAAI0L,EAAJ1L,KAGFyB,GAAOzB,aAAI,EAAJA,EAAMA,OAAQ,GAAE2L,EAAAlL,OAAA,SACtBgB,GAAI,wBAAAkK,EAAAjL,OAAA,GAAA+K,EAAA,KACZ,kBAAAR,EAAAtK,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEa,KAdG8J,EAAJvL,KAcaa,QAdY0K,EAAnBzK,WAcgBwK,gBAAAA,EAChC,EAIO,SAASS,IACd,IAOSC,EAPH7M,EAAkBP,IAExBqN,GAAsC5M,EAAAA,EAAAA,GAA0B,CAC9DC,SAAU,CAAC,sBAAuBH,GAClCI,YAAa,CAAE2M,MAAO,CAAC,EAAGC,SAAU,CAAC,GACrCX,UAAWrM,EACXK,OAAQ,EACRC,SAAOuM,EAAAtM,IAAAC,MAAAC,MAAE,SAAAwM,IAAA,IAAAC,EAAArM,EAAA,OAAAL,MAAAM,MAAA,SAAAqM,GAAA,cAAAA,EAAAnM,KAAAmM,EAAAlM,MAAA,cAAAkM,EAAAlM,KAAA,GACgBmM,EAAAA,EAAAA,IAAkBpN,GAAgB,OAA7C,OAA6CkN,EAAAC,EAAA9L,KAAjDR,EAAIqM,EAAJrM,KAAIsM,EAAA7L,OAAA,SACLT,aAAI,EAAJA,EAAMA,MAAI,wBAAAsM,EAAA5L,OAAA,GAAA0L,EAAA,KAClB,kBAAAJ,EAAArL,MAAA,KAAAC,UAAA,KAGH,MAAO,CAAEZ,KAXGiM,EAAJjM,KAWOa,QAXkBoL,EAAnBnL,WAYhB,C,ypBC5Wa0L,EAAuB,WAClC,IAAAtB,GAA0CC,EAAAA,EAAAA,UAAY,CAAC,GAAOC,EAAArM,IAAAmM,EAAA,GAAvDuB,EAAarB,EAAA,GAAEsB,EAAgBtB,EAAA,GAMtC,MAAO,CAAEqB,cAAAA,EAAeE,UAJN,SAACC,GACjBF,EAAiBE,EACnB,EAGF,EAEalK,EAAwB,WACnC,IAAAmK,GAAwC1B,EAAAA,EAAAA,UAAS,IAAG2B,EAAA/N,IAAA8N,EAAA,GAA7ClK,EAAYmK,EAAA,GAAEC,EAAeD,EAAA,GAUpC,MAAO,CAAElK,mBARiBoK,EAAAA,EAAAA,cACxB,SAACC,GACC,IAAM5K,EAAQ4K,EAAEC,OAAO7K,MACvB0K,EAAgB1K,EAClB,GACA,IAG0BM,aAAAA,EAC9B,EAEawK,EAAoB,WAC/B,IAAQ3H,GAAS4H,EAAAA,EAAAA,MAAT5H,KACA6H,GAAgBC,EAAAA,EAAAA,MAAhBD,YASR,OAPuB,SAACE,GACtB/H,EAAKgI,eACHC,EAAAA,GAAuBF,IAEzBF,EAAY,CAAEK,SAAUH,GAC1B,CAGF,EAEaI,EAA6B,WACxC,IAAQlI,GAAMmI,EAAAA,EAAAA,IAAa,UAAnBnI,EACR8B,GAIIC,EAAAA,EAAAA,MAHFqG,EAAmBtG,EAAnBsG,oBACArK,EAAI+D,EAAJ/D,KACMiE,EAAQF,EAAdG,KAGIoG,GAA4Cd,EAAAA,EAAAA,cAChD,SAACe,EAAoBtG,GACnBoG,EAAoBE,EAAYtG,EAClC,GACA,CAACoG,IAGGG,GAAuBhB,EAAAA,EAAAA,cAC3B,SAACiB,GACCJ,EAAoBI,EAAWzK,KAAMyK,EAAWxG,SAClD,GACA,CAACoG,IAgBH,MAAO,CACLI,YAdkCC,EAAAA,EAAAA,UAAQ,WAC1C,MAAO,CACLC,iBAAiB,EACjBlK,MAAO,EACPmK,iBAAiB,EACjBC,QAAS7K,EACTiE,SAAUA,EACV6G,gBAAiB,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KACpCC,SAAUT,EACVU,UAAW,SAACvK,GAAK,SAAAyB,OAAQD,EAAE,SAAQ,KAAAC,OAAIzB,EAAK,EAEhD,GAAG,CAACwB,EAAGqI,EAActK,EAAMiE,IAIzBgH,cAAeT,EAEnB,EAmCaU,EAAkB,WAC7B,IAAAC,GAA8BxD,EAAAA,EAAAA,UAAkB,CAAC,GAAayD,EAAA7P,IAAA4P,EAAA,GAAvDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAAe/B,EAAAA,EAAAA,aAAWtN,IAAAC,MAAAC,MAAC,SAAAC,IAAA,IAAAmP,EAAA,OAAArP,MAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACb6O,EAAAA,EAAMjQ,IAAI,cAAa,OAAnCgQ,EAAG9O,EAAAM,KAETsO,EAAWE,EAAIhP,MAAM,wBAAAE,EAAAQ,OAAA,GAAAb,EAAA,KACpB,IAMH,OAJAqP,EAAAA,EAAAA,YAAU,WACRH,GACF,GAAG,CAACA,IAEGF,CACT,EAEaM,EAAwB,WAEhC,IADHC,EAAWxO,UAAAM,OAAA,QAAAC,IAAAP,UAAA,GAAAA,UAAA,GAAGyO,EAAAA,EAAIC,qBAElBC,GAA4BpE,EAAAA,EAAAA,UAAkB,CAAC,GAAaqE,EAAAzQ,IAAAwQ,EAAA,GAArDE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAwBxE,EAAAA,EAAAA,WAAS,GAAKyE,EAAA7Q,IAAA4Q,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACdG,GAAQC,EAAAA,EAAAA,UAERC,GAAcjD,EAAAA,EAAAA,cAAY,WAC1B+C,EAAM1B,SACR6B,aAAaH,EAAM1B,SAErB0B,EAAM1B,QAAU8B,YAAW,WACzBT,EAAU,CAAC,GACXQ,aAAaH,EAAM1B,QACrB,GAAG,IACL,GAAG,IAEG+B,GAAOpD,EAAAA,EAAAA,aAAW,eAAAqD,EAAA3Q,IAAAC,MAAAC,MACtB,SAAAyB,EACEiP,EACAC,GAA4B,IAAAC,EAAAC,EAAAxI,EAAAyI,EAAA5O,EAAA6O,EAAAtO,EAAAuO,EAAAC,EAAA,OAAAlR,MAAAM,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OAGX,OAHWsB,EAAAvB,KAAA,EAG1B2P,GAAQ,GAAOpO,EAAAtB,KAAA,EACQ0Q,MAAM1B,EAAK,CAChC2B,OAAQ,OACRC,QAAOjT,IAAAA,IAAA,GACJkT,EAAAA,IAAgBC,EAAAA,EAAAA,OACjB,eAAgB,oBAElBZ,KAAMa,KAAKC,UAAUd,GACrBe,OAAQd,aAAU,EAAVA,EAAYc,SACpB,OARIZ,EAAQ/O,EAAAlB,KAURyH,EAAMwI,EAASa,QAAQC,OACvBb,EAASD,SAAc,QAAND,EAARC,EAAUH,YAAI,IAAAE,OAAA,EAAdA,EACXgB,YAAY,IAAIC,mBACjBD,YAAY,IAAIE,EAAAA,GAChBC,YAAW,OAEH,OAAAjQ,EAAAtB,KAAA,GACOsQ,aAAM,EAANA,EAAQkB,OAAM,QAAvB,KAAD9P,EAACJ,EAAAlB,MACA,CAAFkB,EAAAtB,KAAA,SACgB,GAAXyP,EAAgB/N,EAAhB+N,KAAMxN,EAAUP,EAAVO,OACVwN,EAAM,CAAFnO,EAAAtB,KAAA,SAEQ,OADdyR,QAAQC,KAAK,QACb7B,IAAcvO,EAAAjB,OAAA,oBAGhB,IACQmQ,EAAMO,KAAKY,OAAM1P,aAAK,EAALA,EAAOrC,OAAQ,IAErB,kBADX6Q,EAAID,aAAG,EAAHA,EAAK5Q,QAEb6R,QAAQC,KAAK,QAASjB,GACtBnB,EAASxI,IAAAA,IAAC,CAAC,EACN2J,GAAC,IACJmB,eAAgB1B,aAAI,EAAJA,EAAM2B,mBAG5B,CAAE,MAAOhF,GACP4E,QAAQK,KAAKjF,EACf,CAAC,QAAAvL,EAAAtB,KAAA,gBAKS,OAFdyR,QAAQC,KAAK,SACbhC,GAAQ,GACRG,IAAcvO,EAAAtB,KAAA,GACO6H,EAAG,QAAU,OAAVvG,EAAAyQ,GAAAzQ,EAAAlB,KAAAkB,EAAA0Q,GAAE3B,EAAQ/O,EAAAjB,OAAA,UAAzBT,KAAI0B,EAAAyQ,GAAa1B,SAAQ/O,EAAA0Q,KAAA,QAAA1Q,EAAAvB,KAAA,GAAAuB,EAAA2Q,GAAA3Q,EAAA,SAElCoO,GAAQ,GACRG,IAEA4B,QAAQK,KAAIxQ,EAAA2Q,IAAI,yBAAA3Q,EAAAhB,OAAA,GAAAW,EAAA,mBAEnB,gBAAAsC,EAAAiC,GAAA,OAAAyK,EAAA1P,MAAA,KAAAC,UAAA,EAzDqB,GA0DtB,CAACwO,EAAKa,IAGR,MAAO,CAAEG,KAAAA,EAAMX,OAAAA,EAAQI,KAAAA,EAAMC,QAAAA,EAASG,YAAAA,EACxC,EAEaqC,EAAmB,WAA2B,IAA1BlD,EAAWxO,UAAAM,OAAA,QAAAC,IAAAP,UAAA,GAAAA,UAAA,GAAGyO,EAAAA,EAAIkD,IAC3CX,GAAO5E,EAAAA,EAAAA,aAAW,eAAAwF,EAAA9S,IAAAC,MAAAC,MACtB,SAAAsD,EAAOoN,GAAS,IAAAG,EAAAxI,EAAA,OAAAtI,MAAAM,MAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAAmD,EAAAnD,KAAA,EACS0Q,MAAM1B,EAAK,CAChC2B,OAAQ,OACRC,QAAOjT,IAAAA,IAAA,GACJkT,EAAAA,IAAgBC,EAAAA,EAAAA,OACjB,eAAgB,oBAElBZ,KAAMa,KAAKC,UAAUd,KACrB,OAPY,OAARG,EAAQlN,EAAA/C,KAAA+C,EAAApD,KAAG,EAAHoD,EAAAnD,KAAG,EASGqQ,EAASa,QAAQC,OAAM,OACvB,KAAdtJ,OADEA,EAAG1E,EAAA/C,WACF,EAAHyH,EAAK5C,OACPC,EAAAA,GAAQpB,MAAM+D,aAAG,EAAHA,EAAK3C,SACpB/B,EAAAnD,KAAA,iBAAAmD,EAAApD,KAAA,GAAAoD,EAAA4O,GAAA5O,EAAA,SAEDsO,QAAQK,KAAK,cAAa3O,EAAA4O,IAAS,eAAA5O,EAAA9C,OAAA,SAE9BgQ,GAAQ,yBAAAlN,EAAA7C,OAAA,GAAAwC,EAAA,mBAChB,gBAAAsD,GAAA,OAAAgM,EAAA7R,MAAA,KAAAC,UAAA,EAnBqB,GAoBtB,CAACwO,IAGH,MAAO,CAAEwC,KAAAA,EACX,EAoBaa,EAA8B,WACzC,IAAAC,GAA0BvH,EAAAA,EAAAA,UAAS,IAAGwH,EAAA5T,IAAA2T,EAAA,GAA/BrQ,EAAKsQ,EAAA,GAAEC,EAAQD,EAAA,GAQtB,MAAO,CACL/P,kBAPiE,SAACqK,GAClE,IACM4F,EADQ5F,EAAEC,OAAO7K,MACCyQ,WAAW,MAAO,MAAMA,WAAW,MAAO,MAClEF,EAASC,EACX,EAIExQ,MAAAA,EACAuQ,SAAAA,EAEJ,EAEaG,EAA2B,WACtC,IAAAC,GAA8C7H,EAAAA,EAAAA,UAAqB,IAAG8H,EAAAlU,IAAAiU,EAAA,GAA/DE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAEpCG,EAnCyB,SAACC,GAChC,IAAMD,GAAMpD,EAAAA,EAAAA,QAAuB,MAE7BsD,GAAiBtG,EAAAA,EAAAA,cAAY,WACnB,IAAAuG,EAAVF,IACS,QAAXE,EAAAH,EAAI/E,eAAO,IAAAkF,GAAXA,EAAaC,eAAe,CAAEC,SAAU,YAE5C,GAAG,CAACJ,IAMJ,OAJAnE,EAAAA,EAAAA,YAAU,WACRoE,GACF,GAAG,CAACA,IAEGF,CACT,CAqBcM,CAAkBR,GAExBS,GAAoB3G,EAAAA,EAAAA,cACxB,SAAC1H,GAA0C,IAAxBmK,EAAc7O,UAAAM,OAAA,QAAAC,IAAAP,UAAA,GAAAA,UAAA,GAAG,GAClCuS,GAAmB,SAACS,GAClB,MAAO,GAAPlO,OAAAmO,IACKD,GAAG,CAAA1M,IAAAA,IAAA,GAED5B,GAAO,IACVhD,IAAIwR,EAAAA,EAAAA,IAAiBxO,KAIvB,CACEyO,KAAMC,EAAAA,GAAYC,UAClBC,QAASzE,EACTnN,IAAIwR,EAAAA,EAAAA,IAAgB5M,IAAAA,IAAC,CAAC,EAAI5B,GAAO,IAAEyO,KAAMC,EAAAA,GAAYC,eAG3D,GACF,GACA,IAIIE,GAAkBnH,EAAAA,EAAAA,cAAY,SAACyC,GACnC0D,GAAmB,SAACS,GAAQ,IAAAQ,EAC1B,MAAO,GAAP1O,OAAAmO,IACuB,QADvBO,EACMR,aAAG,EAAHA,EAAKS,MAAM,GAAI,UAAE,IAAAD,EAAAA,EAAI,IAAE,CAAAlN,IAAA,CAEzB6M,KAAMC,EAAAA,GAAYC,UAClBC,QAASzE,EAAOA,OAChB6E,UAAW7E,EAAO6E,UAClBhS,IAAIwR,EAAAA,EAAAA,IAAiB,CACnBxR,GAAImN,EAAOnN,GACXyR,KAAMC,EAAAA,GAAYC,YAEpBM,OAAQ9E,EAAO8E,OACfC,aAAc/E,EAAO+E,eAClBC,EAAAA,EAAAA,MAAKhF,EAAQ,eAGtB,GACF,GAAG,IAEGiF,GAAsB1H,EAAAA,EAAAA,cAAY,WACtCmG,GAAmB,SAACS,GAAQ,IAAAe,EAE1B,OADsC,QAApBA,EAAGf,aAAG,EAAHA,EAAKS,MAAM,GAAI,UAAE,IAAAM,EAAAA,EAAI,EAE5C,GACF,GAAG,IAEGC,GAAoB5H,EAAAA,EAAAA,cACxB,SAAC6H,GACC1B,GAAmB,SAACS,GAAQ,IAAAkB,EAE1B,OAD2D,QAAzCA,EAAGlB,aAAG,EAAHA,EAAK/R,QAAO,SAACC,GAAC,OAAKA,EAAEQ,KAAOuS,CAAS,WAAC,IAAAC,EAAAA,EAAI,EAEjE,GACF,GACA,CAAC3B,IAGG4B,GAAoC/H,EAAAA,EAAAA,cACxC,SAAC6H,GACC1B,GAAmB,SAACS,GAClB,IAAMoB,EAAQpB,EAAIqB,WAAU,SAACnT,GAAC,OAAKA,EAAEQ,KAAOuS,CAAS,IACrD,IAAe,IAAXG,EAAc,KAAAE,EACZC,EAAsC,QAA1BD,EAAGtB,EAAIS,MAAM,EAAGW,EAAQ,UAAE,IAAAE,EAAAA,EAAI,GACxCE,EAAgBD,EAAajM,IAAI,GAYvC,OAXAiM,EAAeC,EAAa,GAAA1P,OAAAmO,IAEnBsB,EAAad,MAAM,GAAI,IAAE,CAAAnN,IAAAA,IAAA,GAEvBkO,GAAa,IAChBlB,QAAS,GACTI,eAAWnT,EACXoT,YAAQpT,MAGZgU,CAEN,CACA,OAAOvB,CACT,GACF,GACA,CAACT,IAGH,MAAO,CACLC,IAAAA,EACAF,gBAAAA,EACAC,mBAAAA,EACAQ,kBAAAA,EACAQ,gBAAAA,EACAO,oBAAAA,EACAE,kBAAAA,EACAG,kCAAAA,EAEJ,EA+CaM,EAAuB,SAAHC,GAa3B,IAZJP,EAAiCO,EAAjCP,kCACAQ,EAAWD,EAAXC,YACAlC,EAAQiC,EAARjC,SAWMmC,GAAoBxI,EAAAA,EAAAA,aAAW,eAAAyI,EAAA/V,IAAAC,MAAAC,MACnC,SAAAmF,EAAOO,GAAgB,IAAA0P,EAAAG,EAAA,OAAAxV,MAAAM,MAAA,SAAAkF,GAAA,cAAAA,EAAAhF,KAAAgF,EAAA/E,MAAA,OACjBkF,EAAQhD,KACVyS,EAAkCzP,EAAQhD,KAG3B,KAFT0S,EAAQ3B,EAAS4B,WAAU,SAACnT,GAAC,OAAKA,EAAEQ,KAAOgD,EAAQhD,EAAE,OAGzD6S,EAAe9B,EAASgB,MAAM,EAAGW,IAEnCO,EAAY,CACVjQ,QAAO4B,IAAAA,IAAA,GAAO5B,GAAO,IAAEhD,IAAIoT,EAAAA,EAAAA,OAC3BrC,SAAU8B,KAEb,wBAAAhQ,EAAAzE,OAAA,GAAAqE,EAAA,KACF,gBAAAoC,GAAA,OAAAsO,EAAA9U,MAAA,KAAAC,UAAA,EAdkC,GAenC,CAACmU,EAAmCQ,EAAalC,IAGnD,MAAO,CAAEmC,kBAAAA,EACX,EAUaG,EAAgB,SAACC,GAC5B,IAAAC,GAAoC1K,EAAAA,EAAAA,UAAS,IAAG2K,EAAA/W,IAAA8W,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,GAAkBjJ,EAAAA,EAAAA,cACtB,SAAC1K,GAAU,OAAK,WACd0T,EAAc1T,EAChB,CAAC,GACD,IASF,OANA4M,EAAAA,EAAAA,YAAU,WACJ0G,GACFI,EAAcJ,EAElB,GAAG,CAACA,IAEG,CAAEG,WAAAA,EAAYE,gBAAAA,EACvB,EAEaC,EAAkB,WAAM,IAAAC,EACrBC,GAAeC,EAAAA,EAAAA,KAAmB,GAAxCrW,KAER,OAAyB,QAAzBmW,EAAOC,aAAU,EAAVA,EAAYE,cAAM,IAAAH,EAAAA,EAAI,EAC/B,EAEMI,EAAmB,CACvBC,MAAO,IACPC,gBAAiB,MAGNC,EAAmC,SAACC,GAc/C,OAZqB3J,EAAAA,EAAAA,cACnB,SAAC3K,GACKA,KAASkU,GACXI,EAAKC,cACH,CAAC,gBAAiB,mBAClBL,EAAiBlU,GAGvB,GACA,CAACsU,GAIL,EAGaE,EAA2B,SAAHC,GAM/B,IALJH,EAAIG,EAAJH,KACAI,EAAOD,EAAPC,QAKMC,GAAchH,EAAAA,EAAAA,WACpBd,EAAAA,EAAAA,YAAU,WACR8H,EAAY3I,QAAU0I,CACxB,GAAG,CAACA,IACJ,IAAME,EAAWD,EAAY3I,SAE7Ba,EAAAA,EAAAA,YAAU,YACH6H,GAAWE,GACdN,EAAKO,aAET,GAAG,CAACP,EAAMM,EAAUF,GACtB,C,yOCpiBYI,EAAY,SAAZA,GAAY,OAAZA,EAAY,WAAZA,EAAY,UAAZA,CAAY,MAKXC,EAAuB,SAACpC,GAInC,OAHqBqC,EAAAA,EAAAA,MAAbC,SAEmBC,MAAM,KAChBvC,IAAU,EAC7B,EAEawC,EAAoB,WAC/B,OAAOJ,EAAqBD,EAAaM,OAC3C,EAEaC,EAAmB,WAC9B,OAAON,EAAqBD,EAAaQ,MAC3C,EAEaC,EAA8B,WACzC,IAAA/Y,GAAiCC,EAAAA,EAAAA,MAA1B+Y,EAA2C9Y,IAAAF,EAAA,GAArB,GAE7B,MAAO,CACLiZ,WACED,EAAuB7Y,IAAIP,EAAAA,GAAsBsZ,aAAe,GAClEC,YACEH,EAAuB7Y,IAAIP,EAAAA,GAAsBwZ,cAAgB,GAEvE,EAEaC,EAA2B,WACtC,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,OAAOpL,EAAAA,EAAAA,cACL,SAACqL,GACCF,EAASE,EAAM,CAAEpP,MAAO,CAAEqP,KAAMD,IAClC,GACA,CAACF,GAEL,EAEaI,EAAuB,WAClC,IAAMJ,GAAWC,EAAAA,EAAAA,MACTJ,EAAgBJ,IAAhBI,YAER,OAAOhL,EAAAA,EAAAA,cAAY,WACjBmL,EAAS,cAADzS,OAAe/H,EAAAA,GAAkB6a,QAAO,QAAA9S,OAAOsS,GACzD,GAAG,CAACA,EAAaG,GACnB,EAWa3Q,EAAyB,WACpC,IAAAiR,GAA2C3Z,EAAAA,EAAAA,MAAiB4Z,EAAA3Z,IAAA0Z,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAeF,EAAA,GAMjC7K,GAAsBb,EAAAA,EAAAA,cAC1B,WAAyC,IAAxCxJ,EAAY5C,UAAAM,OAAA,QAAAC,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAG6G,EAAiB7G,UAAAM,OAAA,EAAAN,UAAA,QAAAO,EAClCwX,EAAgBE,IAAI,OAAQrV,EAAKsV,YAC7BrR,GACFkR,EAAgBE,IAAI,OAAQpR,EAASqR,YAEvCF,EAAgBD,EAClB,GACA,CAACC,EAAiBD,IAGpB,MAAO,CACL9K,oBAAAA,EACArK,KAAMuV,OAAOJ,EAAgB3Z,IAAI,UAAY,EAC7C0I,KAAMqR,OAAOJ,EAAgB3Z,IAAI,UAAY,GAEjD,C,sKCnFEga,EA4BE3J,EAAAA,EA5BF2J,UACAC,EA2BE5J,EAAAA,EA3BF4J,UACAC,EA0BE7J,EAAAA,EA1BF6J,MACA5Y,EAyBE+O,EAAAA,EAzBF/O,cACA6Y,EAwBE9J,EAAAA,EAxBF8J,QACAC,EAuBE/J,EAAAA,EAvBF+J,kBACAC,EAsBEhK,EAAAA,EAtBFgK,uBACAC,EAqBEjK,EAAAA,EArBFiK,YACAC,EAoBElK,EAAAA,EApBFkK,gBACAC,EAmBEnK,EAAAA,EAnBFmK,gBACAC,EAkBEpK,EAAAA,EAlBFoK,uBACAC,EAiBErK,EAAAA,EAjBFqK,oBACAC,EAgBEtK,EAAAA,EAhBFsK,WACAC,EAeEvK,EAAAA,EAfFuK,aACAC,EAcExK,EAAAA,EAdFwK,UACAC,EAaEzK,EAAAA,EAbFyK,UACAC,EAYE1K,EAAAA,EAZF0K,aACAC,EAWE3K,EAAAA,EAXF2K,SACA7R,EAUEkH,EAAAA,EAVFlH,eACA8R,EASE5K,EAAAA,EATF4K,gBACAC,EAQE7K,EAAAA,EARF6K,aACAC,EAOE9K,EAAAA,EAPF8K,gBACAC,EAME/K,EAAAA,EANF+K,UACA3D,EAKEpH,EAAAA,EALFoH,gBACA4D,EAIEhL,EAAAA,EAJFgL,eACAC,EAGEjL,EAAAA,EAHFiL,iBACA1O,EAEEyD,EAAAA,EAFFzD,sBAII2O,EAAU,CAEdnV,SAAU,CACRgK,IAAK4J,EACLjI,OAAQ,QAEV9J,SAAU,CACRmI,IAAK6J,EACLlI,OAAQ,QAEVxK,KAAM,CACJ6I,IAAK8J,EACLnI,OAAQ,QAEVzQ,cAAe,CACb8O,IAAK9O,EACLyQ,OAAQ,OAEVpP,QAAS,CACPyN,IAAK+J,EACLpI,OAAQ,OAGVqI,kBAAmB,CACjBhK,IAAKgK,EACLrI,OAAQ,OAEVsI,uBAAwB,CACtBjK,IAAKiK,EACLtI,OAAQ,QAEVuI,YAAa,CACXlK,IAAKkK,EACLvI,OAAQ,QAEVkJ,gBAAiB,CACf7K,IAAK6K,EACLlJ,OAAQ,QAEVyI,gBAAiB,CACfpK,IAAKoK,EACLzI,OAAQ,QAEVmJ,aAAc,CACZ9K,IAAK8K,EACLnJ,OAAQ,QAEV0I,uBAAwB,CACtBrK,IAAKqK,EACL1I,OAAQ,QAEV2I,oBAAqB,CACnBtK,IAAKsK,EACL3I,OAAQ,OAEVoJ,gBAAiB,CACf/K,IAAK+K,EACLpJ,OAAQ,QAEVqJ,UAAW,CACThL,IAAKgL,EACLrJ,OAAQ,QAEVsJ,eAAgB,CACdjL,IAAKiL,EACLtJ,OAAQ,QAEVyJ,QAAS,CACPpL,IAtEAC,EAAAA,EADFmL,QAwEEzJ,OAAQ,QAGV4I,WAAY,CACVvK,IAAKuK,EACL5I,OAAQ,QAEV6I,aAAc,CACZxK,IAAKwK,EACL7I,OAAQ,QAEV8I,UAAW,CACTzK,IAAKyK,EACL9I,OAAQ,QAEV+I,UAAW,CACT1K,IAAK0K,EACL/I,OAAQ,OAEVgJ,aAAc,CACZ3K,IAAK2K,EACLhJ,OAAQ,QAEViJ,SAAU,CACR5K,IAAK4K,EACLjJ,OAAQ,QAEV5I,eAAgB,CACdiH,IAAKjH,EACL4I,OAAQ,QAEV0F,gBAAiB,CACfrH,IAAKqH,EACL1F,OAAQ,OAEVwI,gBAAiB,CACfnK,IAAKmK,EACLxI,OAAQ,UAEVuJ,iBAAkB,CAChBlL,IAAKkL,EACLvJ,OAAQ,QAEVnF,sBAAuB,CACrBwD,IAAKxD,EACLmF,OAAQ,QAIN1Q,GAAYoa,EAAAA,EAAAA,GAAqCF,EAASG,EAAAA,IAEnDhR,EAAU,SAACsO,GAAmB,OACzC0C,EAAAA,GAAAA,IAAYrL,EAAAA,EAAI3F,QAAQsO,GAAa,EAE1B7N,EAAY,SAAC6N,EAAqBjO,GAAc,OAC3D4Q,EAAAA,EAAAA,IAAKtL,EAAAA,EAAIlF,UAAU6N,GAAc,CAAEjO,KAAAA,GAAO,EAE/Bc,EAAY,SACvBmN,EAAmB7U,GAAA,IACjByX,EAAOzX,EAAPyX,QAASC,EAAK1X,EAAL0X,MAAK,OACbF,EAAAA,EAAAA,IAAKtL,EAAAA,EAAIxE,UAAUmN,GAAc,CAAE4C,QAAAA,EAASC,MAAAA,GAAQ,EAElD,SAAStO,EAAkByL,GAChC,OAAO0C,EAAAA,GAAAA,IAAYrL,EAAAA,EAAI9C,kBAAkByL,GAC3C,CAEA,M,yRClKa8C,EAAwB,SAAC9I,GACpC,OAAOA,IAAmB+I,EAAAA,IAA0C,KAAnB/I,CACnD,EAEa8B,EAAmB,SAACxO,GAC/B,MAAI,OAAQA,GAAWA,EAAQhD,GACtBgD,EAAQhD,IAEVoT,EAAAA,EAAAA,IACT,EAEasF,EAA2B,SAAC3H,GAAyB,IAAA4H,EAChE,OAIK,QAJLA,EACE5H,aAAQ,EAARA,EAAUpR,KAAI,SAACH,GAAqB,OAAAoF,IAAAA,IAAA,IAC/BuN,EAAAA,EAAAA,MAAK3S,EAAG,cAAY,IACvBQ,GAAIwR,EAAiBhS,IAAE,WACtB,IAAAmZ,EAAAA,EAAI,EAEX,EAEaC,EAAoB,WAC/B,OAAOxF,EAAAA,EAAAA,KAAOyF,QAAQ,KAAM,GAC9B,EAGaC,EAA2B,SACtC9V,GAEA,MAAO,GAAPI,OAAUJ,EAAQyO,KAAI,KAAArO,OAAIJ,EAAQhD,GACpC,EAKa+Y,EAAkB,SAACnH,GAS9B,OAR8BA,EAAQiH,QACpC,uBACA,SAACG,EAAGC,GAAQ,WAAA7V,OAAU6V,EAAQ,SAEqBJ,QACnD,uBACA,SAACG,EAAGC,GAAQ,UAAA7V,OAAS6V,EAAQ,OAGjC,EAEO,SAASC,IAKd,OALgD5a,UAAAM,OAAA,QAAAC,IAAAP,UAAA,GAAAA,UAAA,GAAG,IAG/Bua,QAFJ,8BAEqB,sCAGvC,CAEO,SAASM,EACdC,GAEA,OAAOA,IAAUC,EAAAA,GAAyBC,gBAC5C,C","sources":["webpack://web/./src/constants/knowledge.ts","webpack://web/./src/hooks/knowledge-hooks.ts","webpack://web/./src/hooks/logic-hooks.ts","webpack://web/./src/hooks/route-hook.ts","webpack://web/./src/services/knowledge-service.ts","webpack://web/./src/utils/chat.ts"],"sourcesContent":["export enum KnowledgeRouteKey {\n  Dataset = 'dataset',\n  Testing = 'testing',\n  Configuration = 'configuration',\n  KnowledgeGraph = 'knowledgeGraph',\n}\n\nexport const DatasetBaseKey = 'dataset';\n\nexport enum RunningStatus {\n  UNSTART = '0', // need to run\n  RUNNING = '1', // need to cancel\n  CANCEL = '2', // need to refresh\n  DONE = '3', // need to refresh\n  FAIL = '4', // need to refresh\n}\n\nexport enum ModelVariableType {\n  Improvise = 'Improvise',\n  Precise = 'Precise',\n  Balance = 'Balance',\n}\n\nexport const settledModelVariableMap = {\n  [ModelVariableType.Improvise]: {\n    temperature: 0.9,\n    top_p: 0.9,\n    frequency_penalty: 0.2,\n    presence_penalty: 0.4,\n    max_tokens: 512,\n  },\n  [ModelVariableType.Precise]: {\n    temperature: 0.1,\n    top_p: 0.3,\n    frequency_penalty: 0.7,\n    presence_penalty: 0.4,\n    max_tokens: 512,\n  },\n  [ModelVariableType.Balance]: {\n    temperature: 0.5,\n    top_p: 0.5,\n    frequency_penalty: 0.7,\n    presence_penalty: 0.4,\n    max_tokens: 512,\n  },\n};\n\nexport enum LlmModelType {\n  Embedding = 'embedding',\n  Chat = 'chat',\n  Image2text = 'image2text',\n  Speech2text = 'speech2text',\n  Rerank = 'rerank',\n  TTS = 'tts',\n}\n\nexport enum KnowledgeSearchParams {\n  DocumentId = 'doc_id',\n  KnowledgeId = 'id',\n}\n\nexport enum DocumentType {\n  Virtual = 'virtual',\n  Visual = 'visual',\n}\n\nexport enum DocumentParserType {\n  Naive = 'naive',\n  Qa = 'qa',\n  Resume = 'resume',\n  Manual = 'manual',\n  Table = 'table',\n  Paper = 'paper',\n  Book = 'book',\n  Laws = 'laws',\n  Presentation = 'presentation',\n  Picture = 'picture',\n  One = 'one',\n  Audio = 'audio',\n  Email = 'email',\n  Tag = 'tag',\n  KnowledgeGraph = 'knowledge_graph',\n}\n","import { ResponsePostType } from '@/interfaces/database/base';\nimport {\n  IKnowledge,\n  IKnowledgeGraph,\n  IRenameTag,\n  ITestingResult,\n} from '@/interfaces/database/knowledge';\nimport i18n from '@/locales/config';\nimport kbService, {\n  getKnowledgeGraph,\n  listTag,\n  removeTag,\n  renameTag,\n} from '@/services/knowledge-service';\nimport {\n  useInfiniteQuery,\n  useIsMutating,\n  useMutation,\n  useMutationState,\n  useQuery,\n  useQueryClient,\n} from '@tanstack/react-query';\nimport { useDebounce } from 'ahooks';\nimport { message } from 'antd';\nimport { useState } from 'react';\nimport { useSearchParams } from 'umi';\nimport { useHandleSearchChange } from './logic-hooks';\nimport { useSetPaginationParams } from './route-hook';\n\nexport const useKnowledgeBaseId = (): string => {\n  const [searchParams] = useSearchParams();\n  const knowledgeBaseId = searchParams.get('id');\n\n  return knowledgeBaseId || '';\n};\n\nexport const useFetchKnowledgeBaseConfiguration = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<IKnowledge>({\n    queryKey: ['fetchKnowledgeDetail'],\n    initialData: {} as IKnowledge,\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await kbService.get_kb_detail({\n        kb_id: knowledgeBaseId,\n      });\n      return data?.data ?? {};\n    },\n  });\n\n  return { data, loading };\n};\n\nexport const useFetchKnowledgeList = (\n  shouldFilterListWithoutDocument: boolean = false,\n): {\n  list: IKnowledge[];\n  loading: boolean;\n} => {\n  const { data, isFetching: loading } = useQuery({\n    queryKey: ['fetchKnowledgeList'],\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await kbService.getList();\n      const list = data?.data?.kbs ?? [];\n      return shouldFilterListWithoutDocument\n        ? list.filter((x: IKnowledge) => x.chunk_num > 0)\n        : list;\n    },\n  });\n\n  return { list: data, loading };\n};\n\nexport const useSelectKnowledgeOptions = () => {\n  const { list } = useFetchKnowledgeList();\n\n  const options = list?.map((item) => ({\n    label: item.name,\n    value: item.id,\n  }));\n\n  return options;\n};\n\nexport const useInfiniteFetchKnowledgeList = () => {\n  const { searchString, handleInputChange } = useHandleSearchChange();\n  const debouncedSearchString = useDebounce(searchString, { wait: 500 });\n\n  const PageSize = 30;\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage,\n    status,\n  } = useInfiniteQuery({\n    queryKey: ['infiniteFetchKnowledgeList', debouncedSearchString],\n    queryFn: async ({ pageParam }) => {\n      const { data } = await kbService.getList({\n        page: pageParam,\n        page_size: PageSize,\n        keywords: debouncedSearchString,\n      });\n      const list = data?.data ?? [];\n      return list;\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, pages, lastPageParam) => {\n      if (lastPageParam * PageSize <= lastPage.total) {\n        return lastPageParam + 1;\n      }\n      return undefined;\n    },\n  });\n  return {\n    data,\n    loading: isFetching,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage,\n    status,\n    handleInputChange,\n    searchString,\n  };\n};\n\nexport const useCreateKnowledge = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createKnowledge'],\n    mutationFn: async (params: { id?: string; name: string }) => {\n      const { data = {} } = await kbService.createKb(params);\n      if (data.code === 0) {\n        message.success(\n          i18n.t(`message.${params?.id ? 'modified' : 'created'}`),\n        );\n        queryClient.invalidateQueries({ queryKey: ['fetchKnowledgeList'] });\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, createKnowledge: mutateAsync };\n};\n\nexport const useDeleteKnowledge = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteKnowledge'],\n    mutationFn: async (id: string) => {\n      const { data } = await kbService.rmKb({ kb_id: id });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['infiniteFetchKnowledgeList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, deleteKnowledge: mutateAsync };\n};\n\n//#region knowledge configuration\n\nexport const useUpdateKnowledge = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['saveKnowledge'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data = {} } = await kbService.updateKb({\n        kb_id: knowledgeBaseId,\n        ...params,\n      });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.updated`));\n        queryClient.invalidateQueries({ queryKey: ['fetchKnowledgeDetail'] });\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, saveKnowledgeConfiguration: mutateAsync };\n};\n\n//#endregion\n\n//#region Retrieval testing\n\nexport const useTestChunkRetrieval = (): ResponsePostType<ITestingResult> & {\n  testChunk: (...params: any[]) => void;\n} => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const { page, size: pageSize } = useSetPaginationParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['testChunk'], // This method is invalid\n    gcTime: 0,\n    mutationFn: async (values: any) => {\n      const { data } = await kbService.retrieval_test({\n        ...values,\n        kb_id: values.kb_id ?? knowledgeBaseId,\n        page,\n        size: pageSize,\n      });\n      if (data.code === 0) {\n        const res = data.data;\n        return {\n          ...res,\n          documents: res.doc_aggs,\n        };\n      }\n      return (\n        data?.data ?? {\n          chunks: [],\n          documents: [],\n          total: 0,\n        }\n      );\n    },\n  });\n\n  return {\n    data: data ?? { chunks: [], documents: [], total: 0 },\n    loading,\n    testChunk: mutateAsync,\n  };\n};\n\nexport const useChunkIsTesting = () => {\n  return useIsMutating({ mutationKey: ['testChunk'] }) > 0;\n};\n\nexport const useSelectTestingResult = (): ITestingResult => {\n  const data = useMutationState({\n    filters: { mutationKey: ['testChunk'] },\n    select: (mutation) => {\n      return mutation.state.data;\n    },\n  });\n  return (data.at(-1) ?? {\n    chunks: [],\n    documents: [],\n    total: 0,\n  }) as ITestingResult;\n};\n\nexport const useSelectIsTestingSuccess = () => {\n  const status = useMutationState({\n    filters: { mutationKey: ['testChunk'] },\n    select: (mutation) => {\n      return mutation.state.status;\n    },\n  });\n  return status.at(-1) === 'success';\n};\n//#endregion\n\n//#region tags\n\nexport const useFetchTagList = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<Array<[string, number]>>({\n    queryKey: ['fetchTagList'],\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await listTag(knowledgeBaseId);\n      const list = data?.data || [];\n      return list;\n    },\n  });\n\n  return { list: data, loading };\n};\n\nexport const useDeleteTag = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteTag'],\n    mutationFn: async (tags: string[]) => {\n      const { data } = await removeTag(knowledgeBaseId, tags);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchTagList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, deleteTag: mutateAsync };\n};\n\nexport const useRenameTag = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['renameTag'],\n    mutationFn: async (params: IRenameTag) => {\n      const { data } = await renameTag(knowledgeBaseId, params);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.modified`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchTagList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, renameTag: mutateAsync };\n};\n\nexport const useTagIsRenaming = () => {\n  return useIsMutating({ mutationKey: ['renameTag'] }) > 0;\n};\n\nexport const useFetchTagListByKnowledgeIds = () => {\n  const [knowledgeIds, setKnowledgeIds] = useState<string[]>([]);\n\n  const { data, isFetching: loading } = useQuery<Array<[string, number]>>({\n    queryKey: ['fetchTagListByKnowledgeIds'],\n    enabled: knowledgeIds.length > 0,\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await kbService.listTagByKnowledgeIds({\n        kb_ids: knowledgeIds.join(','),\n      });\n      const list = data?.data || [];\n      return list;\n    },\n  });\n\n  return { list: data, loading, setKnowledgeIds };\n};\n\n//#endregion\n\nexport function useFetchKnowledgeGraph() {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<IKnowledgeGraph>({\n    queryKey: ['fetchKnowledgeGraph', knowledgeBaseId],\n    initialData: { graph: {}, mind_map: {} } as IKnowledgeGraph,\n    enabled: !!knowledgeBaseId,\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await getKnowledgeGraph(knowledgeBaseId);\n      return data?.data;\n    },\n  });\n\n  return { data, loading };\n}\n","import { Authorization } from '@/constants/authorization';\nimport { MessageType } from '@/constants/chat';\nimport { LanguageTranslationMap } from '@/constants/common';\nimport { ResponseType } from '@/interfaces/database/base';\nimport { IAnswer, Message } from '@/interfaces/database/chat';\nimport { IKnowledgeFile } from '@/interfaces/database/knowledge';\nimport { IClientConversation, IMessage } from '@/pages/chat/interface';\nimport api from '@/utils/api';\nimport { getAuthorization } from '@/utils/authorization-util';\nimport { buildMessageUuid } from '@/utils/chat';\nimport { PaginationProps, message } from 'antd';\nimport { FormInstance } from 'antd/lib';\nimport axios from 'axios';\nimport { EventSourceParserStream } from 'eventsource-parser/stream';\nimport { omit } from 'lodash';\nimport {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { v4 as uuid } from 'uuid';\nimport { useTranslate } from './common-hooks';\nimport { useSetPaginationParams } from './route-hook';\nimport { useFetchTenantInfo, useSaveSetting } from './user-setting-hooks';\n\nexport const useSetSelectedRecord = <T = IKnowledgeFile>() => {\n  const [currentRecord, setCurrentRecord] = useState<T>({} as T);\n\n  const setRecord = (record: T) => {\n    setCurrentRecord(record);\n  };\n\n  return { currentRecord, setRecord };\n};\n\nexport const useHandleSearchChange = () => {\n  const [searchString, setSearchString] = useState('');\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const value = e.target.value;\n      setSearchString(value);\n    },\n    [],\n  );\n\n  return { handleInputChange, searchString };\n};\n\nexport const useChangeLanguage = () => {\n  const { i18n } = useTranslation();\n  const { saveSetting } = useSaveSetting();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(\n      LanguageTranslationMap[lng as keyof typeof LanguageTranslationMap],\n    );\n    saveSetting({ language: lng });\n  };\n\n  return changeLanguage;\n};\n\nexport const useGetPaginationWithRouter = () => {\n  const { t } = useTranslate('common');\n  const {\n    setPaginationParams,\n    page,\n    size: pageSize,\n  } = useSetPaginationParams();\n\n  const onPageChange: PaginationProps['onChange'] = useCallback(\n    (pageNumber: number, pageSize: number) => {\n      setPaginationParams(pageNumber, pageSize);\n    },\n    [setPaginationParams],\n  );\n\n  const setCurrentPagination = useCallback(\n    (pagination: { page: number; pageSize?: number }) => {\n      setPaginationParams(pagination.page, pagination.pageSize);\n    },\n    [setPaginationParams],\n  );\n\n  const pagination: PaginationProps = useMemo(() => {\n    return {\n      showQuickJumper: true,\n      total: 0,\n      showSizeChanger: true,\n      current: page,\n      pageSize: pageSize,\n      pageSizeOptions: [1, 2, 10, 20, 50, 100],\n      onChange: onPageChange,\n      showTotal: (total) => `${t('total')} ${total}`,\n    };\n  }, [t, onPageChange, page, pageSize]);\n\n  return {\n    pagination,\n    setPagination: setCurrentPagination,\n  };\n};\n\nexport const useGetPagination = () => {\n  const [pagination, setPagination] = useState({ page: 1, pageSize: 10 });\n  const { t } = useTranslate('common');\n\n  const onPageChange: PaginationProps['onChange'] = useCallback(\n    (pageNumber: number, pageSize: number) => {\n      setPagination({ page: pageNumber, pageSize });\n    },\n    [],\n  );\n\n  const currentPagination: PaginationProps = useMemo(() => {\n    return {\n      showQuickJumper: true,\n      total: 0,\n      showSizeChanger: true,\n      current: pagination.page,\n      pageSize: pagination.pageSize,\n      pageSizeOptions: [1, 2, 10, 20, 50, 100],\n      onChange: onPageChange,\n      showTotal: (total) => `${t('total')} ${total}`,\n    };\n  }, [t, onPageChange, pagination]);\n\n  return {\n    pagination: currentPagination,\n  };\n};\n\nexport interface AppConf {\n  appName: string;\n}\n\nexport const useFetchAppConf = () => {\n  const [appConf, setAppConf] = useState<AppConf>({} as AppConf);\n  const fetchAppConf = useCallback(async () => {\n    const ret = await axios.get('/conf.json');\n\n    setAppConf(ret.data);\n  }, []);\n\n  useEffect(() => {\n    fetchAppConf();\n  }, [fetchAppConf]);\n\n  return appConf;\n};\n\nexport const useSendMessageWithSse = (\n  url: string = api.completeConversation,\n) => {\n  const [answer, setAnswer] = useState<IAnswer>({} as IAnswer);\n  const [done, setDone] = useState(true);\n  const timer = useRef<any>();\n\n  const resetAnswer = useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = setTimeout(() => {\n      setAnswer({} as IAnswer);\n      clearTimeout(timer.current);\n    }, 1000);\n  }, []);\n\n  const send = useCallback(\n    async (\n      body: any,\n      controller?: AbortController,\n    ): Promise<{ response: Response; data: ResponseType } | undefined> => {\n      try {\n        setDone(false);\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            [Authorization]: getAuthorization(),\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n          signal: controller?.signal,\n        });\n\n        const res = response.clone().json();\n        const reader = response?.body\n          ?.pipeThrough(new TextDecoderStream())\n          .pipeThrough(new EventSourceParserStream())\n          .getReader();\n\n        while (true) {\n          const x = await reader?.read();\n          if (x) {\n            const { done, value } = x;\n            if (done) {\n              console.info('done');\n              resetAnswer();\n              break;\n            }\n            try {\n              const val = JSON.parse(value?.data || '');\n              const d = val?.data;\n              if (typeof d !== 'boolean') {\n                console.info('data:', d);\n                setAnswer({\n                  ...d,\n                  conversationId: body?.conversation_id,\n                });\n              }\n            } catch (e) {\n              console.warn(e);\n            }\n          }\n        }\n        console.info('done?');\n        setDone(true);\n        resetAnswer();\n        return { data: await res, response };\n      } catch (e) {\n        setDone(true);\n        resetAnswer();\n\n        console.warn(e);\n      }\n    },\n    [url, resetAnswer],\n  );\n\n  return { send, answer, done, setDone, resetAnswer };\n};\n\nexport const useSpeechWithSse = (url: string = api.tts) => {\n  const read = useCallback(\n    async (body: any) => {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          [Authorization]: getAuthorization(),\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n      try {\n        const res = await response.clone().json();\n        if (res?.code !== 0) {\n          message.error(res?.message);\n        }\n      } catch (error) {\n        console.warn('🚀 ~ error:', error);\n      }\n      return response;\n    },\n    [url],\n  );\n\n  return { read };\n};\n\n//#region chat hooks\n\nexport const useScrollToBottom = (messages?: unknown) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = useCallback(() => {\n    if (messages) {\n      ref.current?.scrollIntoView({ behavior: 'instant' });\n    }\n  }, [messages]); // If the message changes, scroll to the bottom\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  return ref;\n};\n\nexport const useHandleMessageInputChange = () => {\n  const [value, setValue] = useState('');\n\n  const handleInputChange: ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n    const value = e.target.value;\n    const nextValue = value.replaceAll('\\\\n', '\\n').replaceAll('\\\\t', '\\t');\n    setValue(nextValue);\n  };\n\n  return {\n    handleInputChange,\n    value,\n    setValue,\n  };\n};\n\nexport const useSelectDerivedMessages = () => {\n  const [derivedMessages, setDerivedMessages] = useState<IMessage[]>([]);\n\n  const ref = useScrollToBottom(derivedMessages);\n\n  const addNewestQuestion = useCallback(\n    (message: Message, answer: string = '') => {\n      setDerivedMessages((pre) => {\n        return [\n          ...pre,\n          {\n            ...message,\n            id: buildMessageUuid(message), // The message id is generated on the front end,\n            // and the message id returned by the back end is the same as the question id,\n            //  so that the pair of messages can be deleted together when deleting the message\n          },\n          {\n            role: MessageType.Assistant,\n            content: answer,\n            id: buildMessageUuid({ ...message, role: MessageType.Assistant }),\n          },\n        ];\n      });\n    },\n    [],\n  );\n\n  // Add the streaming message to the last item in the message list\n  const addNewestAnswer = useCallback((answer: IAnswer) => {\n    setDerivedMessages((pre) => {\n      return [\n        ...(pre?.slice(0, -1) ?? []),\n        {\n          role: MessageType.Assistant,\n          content: answer.answer,\n          reference: answer.reference,\n          id: buildMessageUuid({\n            id: answer.id,\n            role: MessageType.Assistant,\n          }),\n          prompt: answer.prompt,\n          audio_binary: answer.audio_binary,\n          ...omit(answer, 'reference'),\n        },\n      ];\n    });\n  }, []);\n\n  const removeLatestMessage = useCallback(() => {\n    setDerivedMessages((pre) => {\n      const nextMessages = pre?.slice(0, -2) ?? [];\n      return nextMessages;\n    });\n  }, []);\n\n  const removeMessageById = useCallback(\n    (messageId: string) => {\n      setDerivedMessages((pre) => {\n        const nextMessages = pre?.filter((x) => x.id !== messageId) ?? [];\n        return nextMessages;\n      });\n    },\n    [setDerivedMessages],\n  );\n\n  const removeMessagesAfterCurrentMessage = useCallback(\n    (messageId: string) => {\n      setDerivedMessages((pre) => {\n        const index = pre.findIndex((x) => x.id === messageId);\n        if (index !== -1) {\n          let nextMessages = pre.slice(0, index + 2) ?? [];\n          const latestMessage = nextMessages.at(-1);\n          nextMessages = latestMessage\n            ? [\n                ...nextMessages.slice(0, -1),\n                {\n                  ...latestMessage,\n                  content: '',\n                  reference: undefined,\n                  prompt: undefined,\n                },\n              ]\n            : nextMessages;\n          return nextMessages;\n        }\n        return pre;\n      });\n    },\n    [setDerivedMessages],\n  );\n\n  return {\n    ref,\n    derivedMessages,\n    setDerivedMessages,\n    addNewestQuestion,\n    addNewestAnswer,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  };\n};\n\nexport interface IRemoveMessageById {\n  removeMessageById(messageId: string): void;\n}\n\nexport const useRemoveMessagesAfterCurrentMessage = (\n  setCurrentConversation: (\n    callback: (state: IClientConversation) => IClientConversation,\n  ) => void,\n) => {\n  const removeMessagesAfterCurrentMessage = useCallback(\n    (messageId: string) => {\n      setCurrentConversation((pre) => {\n        const index = pre.message?.findIndex((x) => x.id === messageId);\n        if (index !== -1) {\n          let nextMessages = pre.message?.slice(0, index + 2) ?? [];\n          const latestMessage = nextMessages.at(-1);\n          nextMessages = latestMessage\n            ? [\n                ...nextMessages.slice(0, -1),\n                {\n                  ...latestMessage,\n                  content: '',\n                  reference: undefined,\n                  prompt: undefined,\n                },\n              ]\n            : nextMessages;\n          return {\n            ...pre,\n            message: nextMessages,\n          };\n        }\n        return pre;\n      });\n    },\n    [setCurrentConversation],\n  );\n\n  return { removeMessagesAfterCurrentMessage };\n};\n\nexport interface IRegenerateMessage {\n  regenerateMessage?: (message: Message) => void;\n}\n\nexport const useRegenerateMessage = ({\n  removeMessagesAfterCurrentMessage,\n  sendMessage,\n  messages,\n}: {\n  removeMessagesAfterCurrentMessage(messageId: string): void;\n  sendMessage({\n    message,\n  }: {\n    message: Message;\n    messages?: Message[];\n  }): void | Promise<any>;\n  messages: Message[];\n}) => {\n  const regenerateMessage = useCallback(\n    async (message: Message) => {\n      if (message.id) {\n        removeMessagesAfterCurrentMessage(message.id);\n        const index = messages.findIndex((x) => x.id === message.id);\n        let nextMessages;\n        if (index !== -1) {\n          nextMessages = messages.slice(0, index);\n        }\n        sendMessage({\n          message: { ...message, id: uuid() },\n          messages: nextMessages,\n        });\n      }\n    },\n    [removeMessagesAfterCurrentMessage, sendMessage, messages],\n  );\n\n  return { regenerateMessage };\n};\n\n// #endregion\n\n/**\n *\n * @param defaultId\n * used to switch between different items, similar to radio\n * @returns\n */\nexport const useSelectItem = (defaultId?: string) => {\n  const [selectedId, setSelectedId] = useState('');\n\n  const handleItemClick = useCallback(\n    (id: string) => () => {\n      setSelectedId(id);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (defaultId) {\n      setSelectedId(defaultId);\n    }\n  }, [defaultId]);\n\n  return { selectedId, handleItemClick };\n};\n\nexport const useFetchModelId = () => {\n  const { data: tenantInfo } = useFetchTenantInfo(true);\n\n  return tenantInfo?.llm_id ?? '';\n};\n\nconst ChunkTokenNumMap = {\n  naive: 128,\n  knowledge_graph: 8192,\n};\n\nexport const useHandleChunkMethodSelectChange = (form: FormInstance) => {\n  // const form = Form.useFormInstance();\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value in ChunkTokenNumMap) {\n        form.setFieldValue(\n          ['parser_config', 'chunk_token_num'],\n          ChunkTokenNumMap[value as keyof typeof ChunkTokenNumMap],\n        );\n      }\n    },\n    [form],\n  );\n\n  return handleChange;\n};\n\n// reset form fields when modal is form, closed\nexport const useResetFormOnCloseModal = ({\n  form,\n  visible,\n}: {\n  form: FormInstance;\n  visible?: boolean;\n}) => {\n  const prevOpenRef = useRef<boolean>();\n  useEffect(() => {\n    prevOpenRef.current = visible;\n  }, [visible]);\n  const prevOpen = prevOpenRef.current;\n\n  useEffect(() => {\n    if (!visible && prevOpen) {\n      form.resetFields();\n    }\n  }, [form, prevOpen, visible]);\n};\n","import {\n  KnowledgeRouteKey,\n  KnowledgeSearchParams,\n} from '@/constants/knowledge';\nimport { useCallback } from 'react';\nimport { useLocation, useNavigate, useSearchParams } from 'umi';\n\nexport enum SegmentIndex {\n  Second = '2',\n  Third = '3',\n}\n\nexport const useSegmentedPathName = (index: SegmentIndex) => {\n  const { pathname } = useLocation();\n\n  const pathArray = pathname.split('/');\n  return pathArray[index] || '';\n};\n\nexport const useSecondPathName = () => {\n  return useSegmentedPathName(SegmentIndex.Second);\n};\n\nexport const useThirdPathName = () => {\n  return useSegmentedPathName(SegmentIndex.Third);\n};\n\nexport const useGetKnowledgeSearchParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    documentId:\n      currentQueryParameters.get(KnowledgeSearchParams.DocumentId) || '',\n    knowledgeId:\n      currentQueryParameters.get(KnowledgeSearchParams.KnowledgeId) || '',\n  };\n};\n\nexport const useNavigateWithFromState = () => {\n  const navigate = useNavigate();\n  return useCallback(\n    (path: string) => {\n      navigate(path, { state: { from: path } });\n    },\n    [navigate],\n  );\n};\n\nexport const useNavigateToDataset = () => {\n  const navigate = useNavigate();\n  const { knowledgeId } = useGetKnowledgeSearchParams();\n\n  return useCallback(() => {\n    navigate(`/knowledge/${KnowledgeRouteKey.Dataset}?id=${knowledgeId}`);\n  }, [knowledgeId, navigate]);\n};\n\nexport const useGetPaginationParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    page: currentQueryParameters.get('page') || 1,\n    size: currentQueryParameters.get('size') || 10,\n  };\n};\n\nexport const useSetPaginationParams = () => {\n  const [queryParameters, setSearchParams] = useSearchParams();\n  // const newQueryParameters: URLSearchParams = useMemo(\n  //   () => new URLSearchParams(queryParameters.toString()),\n  //   [queryParameters],\n  // );\n\n  const setPaginationParams = useCallback(\n    (page: number = 1, pageSize?: number) => {\n      queryParameters.set('page', page.toString());\n      if (pageSize) {\n        queryParameters.set('size', pageSize.toString());\n      }\n      setSearchParams(queryParameters);\n    },\n    [setSearchParams, queryParameters],\n  );\n\n  return {\n    setPaginationParams,\n    page: Number(queryParameters.get('page')) || 1,\n    size: Number(queryParameters.get('size')) || 10,\n  };\n};\n","import { IRenameTag } from '@/interfaces/database/knowledge';\nimport api from '@/utils/api';\nimport registerServer from '@/utils/register-server';\nimport request, { post } from '@/utils/request';\n\nconst {\n  create_kb,\n  update_kb,\n  rm_kb,\n  get_kb_detail,\n  kb_list,\n  get_document_list,\n  document_change_status,\n  document_rm,\n  document_delete,\n  document_create,\n  document_change_parser,\n  document_thumbnails,\n  chunk_list,\n  create_chunk,\n  set_chunk,\n  get_chunk,\n  switch_chunk,\n  rm_chunk,\n  retrieval_test,\n  document_rename,\n  document_run,\n  document_upload,\n  web_crawl,\n  knowledge_graph,\n  document_infos,\n  upload_and_parse,\n  listTagByKnowledgeIds,\n  setMeta,\n} = api;\n\nconst methods = {\n  // 知识库管理\n  createKb: {\n    url: create_kb,\n    method: 'post',\n  },\n  updateKb: {\n    url: update_kb,\n    method: 'post',\n  },\n  rmKb: {\n    url: rm_kb,\n    method: 'post',\n  },\n  get_kb_detail: {\n    url: get_kb_detail,\n    method: 'get',\n  },\n  getList: {\n    url: kb_list,\n    method: 'get',\n  },\n  // document manager\n  get_document_list: {\n    url: get_document_list,\n    method: 'get',\n  },\n  document_change_status: {\n    url: document_change_status,\n    method: 'post',\n  },\n  document_rm: {\n    url: document_rm,\n    method: 'post',\n  },\n  document_rename: {\n    url: document_rename,\n    method: 'post',\n  },\n  document_create: {\n    url: document_create,\n    method: 'post',\n  },\n  document_run: {\n    url: document_run,\n    method: 'post',\n  },\n  document_change_parser: {\n    url: document_change_parser,\n    method: 'post',\n  },\n  document_thumbnails: {\n    url: document_thumbnails,\n    method: 'get',\n  },\n  document_upload: {\n    url: document_upload,\n    method: 'post',\n  },\n  web_crawl: {\n    url: web_crawl,\n    method: 'post',\n  },\n  document_infos: {\n    url: document_infos,\n    method: 'post',\n  },\n  setMeta: {\n    url: setMeta,\n    method: 'post',\n  },\n  // chunk管理\n  chunk_list: {\n    url: chunk_list,\n    method: 'post',\n  },\n  create_chunk: {\n    url: create_chunk,\n    method: 'post',\n  },\n  set_chunk: {\n    url: set_chunk,\n    method: 'post',\n  },\n  get_chunk: {\n    url: get_chunk,\n    method: 'get',\n  },\n  switch_chunk: {\n    url: switch_chunk,\n    method: 'post',\n  },\n  rm_chunk: {\n    url: rm_chunk,\n    method: 'post',\n  },\n  retrieval_test: {\n    url: retrieval_test,\n    method: 'post',\n  },\n  knowledge_graph: {\n    url: knowledge_graph,\n    method: 'get',\n  },\n  document_delete: {\n    url: document_delete,\n    method: 'delete',\n  },\n  upload_and_parse: {\n    url: upload_and_parse,\n    method: 'post',\n  },\n  listTagByKnowledgeIds: {\n    url: listTagByKnowledgeIds,\n    method: 'get',\n  },\n};\n\nconst kbService = registerServer<keyof typeof methods>(methods, request);\n\nexport const listTag = (knowledgeId: string) =>\n  request.get(api.listTag(knowledgeId));\n\nexport const removeTag = (knowledgeId: string, tags: string[]) =>\n  post(api.removeTag(knowledgeId), { tags });\n\nexport const renameTag = (\n  knowledgeId: string,\n  { fromTag, toTag }: IRenameTag,\n) => post(api.renameTag(knowledgeId), { fromTag, toTag });\n\nexport function getKnowledgeGraph(knowledgeId: string) {\n  return request.get(api.getKnowledgeGraph(knowledgeId));\n}\n\nexport default kbService;\n","import {\n  ChatVariableEnabledField,\n  EmptyConversationId,\n} from '@/constants/chat';\nimport { Message } from '@/interfaces/database/chat';\nimport { IMessage } from '@/pages/chat/interface';\nimport { omit } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\nexport const isConversationIdExist = (conversationId: string) => {\n  return conversationId !== EmptyConversationId && conversationId !== '';\n};\n\nexport const buildMessageUuid = (message: Partial<Message | IMessage>) => {\n  if ('id' in message && message.id) {\n    return message.id;\n  }\n  return uuid();\n};\n\nexport const buildMessageListWithUuid = (messages?: Message[]) => {\n  return (\n    messages?.map((x: Message | IMessage) => ({\n      ...omit(x, 'reference'),\n      id: buildMessageUuid(x),\n    })) ?? []\n  );\n};\n\nexport const getConversationId = () => {\n  return uuid().replace(/-/g, '');\n};\n\n// When rendering each message, add a prefix to the id to ensure uniqueness.\nexport const buildMessageUuidWithRole = (\n  message: Partial<Message | IMessage>,\n) => {\n  return `${message.role}_${message.id}`;\n};\n\n// Preprocess LaTeX equations to be rendered by KaTeX\n// ref: https://github.com/remarkjs/react-markdown/issues/785\n\nexport const preprocessLaTeX = (content: string) => {\n  const blockProcessedContent = content.replace(\n    /\\\\\\[([\\s\\S]*?)\\\\\\]/g,\n    (_, equation) => `$$${equation}$$`,\n  );\n  const inlineProcessedContent = blockProcessedContent.replace(\n    /\\\\\\(([\\s\\S]*?)\\\\\\)/g,\n    (_, equation) => `$${equation}$`,\n  );\n  return inlineProcessedContent;\n};\n\nexport function replaceThinkToSection(text: string = '') {\n  const pattern = /<think>([\\s\\S]*?)<\\/think>/g;\n\n  const result = text.replace(pattern, '<section class=\"think\">$1</section>');\n\n  return result;\n}\n\nexport function setInitialChatVariableEnabledFieldValue(\n  field: ChatVariableEnabledField,\n) {\n  return field !== ChatVariableEnabledField.MaxTokensEnabled;\n}\n"],"names":["KnowledgeRouteKey","RunningStatus","ModelVariableType","settledModelVariableMap","_defineProperty","Improvise","temperature","top_p","frequency_penalty","presence_penalty","max_tokens","Precise","Balance","LlmModelType","KnowledgeSearchParams","DocumentType","DocumentParserType","useKnowledgeBaseId","_useSearchParams","useSearchParams","_slicedToArray","get","useFetchKnowledgeBaseConfiguration","_queryFn","knowledgeBaseId","_useQuery","useQuery","queryKey","initialData","gcTime","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$data","_yield$kbService$get_","data","wrap","_context","prev","next","kbService","get_kb_detail","kb_id","sent","abrupt","stop","apply","arguments","loading","isFetching","useFetchKnowledgeList","_queryFn2","shouldFilterListWithoutDocument","length","undefined","_useQuery2","_callee2","_data$data$kbs","_data$data2","_yield$kbService$getL","list","_context2","getList","kbs","filter","x","chunk_num","useSelectKnowledgeOptions","map","item","label","name","value","id","useInfiniteFetchKnowledgeList","_queryFn3","_useHandleSearchChang","useHandleSearchChange","searchString","handleInputChange","debouncedSearchString","useDebounce","wait","_useInfiniteQuery","useInfiniteQuery","_callee3","_ref","_data$data3","pageParam","_yield$kbService$getL2","_context3","page","page_size","keywords","_x","initialPageParam","getNextPageParam","lastPage","pages","lastPageParam","total","error","fetchNextPage","hasNextPage","isFetchingNextPage","status","useCreateKnowledge","_mutationFn","queryClient","useQueryClient","_useMutation","useMutation","mutationKey","mutationFn","_callee4","params","_yield$kbService$crea","_yield$kbService$crea2","_context4","createKb","code","message","success","i18n","t","concat","invalidateQueries","_x2","isPending","createKnowledge","mutateAsync","useDeleteKnowledge","_mutationFn2","_useMutation2","_callee5","_data$data4","_yield$kbService$rmKb","_context5","rmKb","_x3","deleteKnowledge","useUpdateKnowledge","_mutationFn3","_useMutation3","_callee6","_yield$kbService$upda","_yield$kbService$upda2","_context6","updateKb","_objectSpread","_x4","saveKnowledgeConfiguration","useTestChunkRetrieval","_mutationFn4","_useSetPaginationPara","useSetPaginationParams","pageSize","size","_useMutation4","_callee7","values","_values$kb_id","_data$data5","_yield$kbService$retr","res","_context7","retrieval_test","documents","doc_aggs","chunks","_x5","testChunk","useChunkIsTesting","useIsMutating","useSelectTestingResult","_data$at","useMutationState","filters","select","mutation","state","at","useSelectIsTestingSuccess","useFetchTagList","_queryFn4","_useQuery3","_callee8","_yield$listTag","_context8","listTag","useDeleteTag","_mutationFn5","_useMutation5","_callee9","tags","_data$data6","_yield$removeTag","_context9","removeTag","_x6","deleteTag","useRenameTag","_mutationFn6","_useMutation6","_callee10","_data$data7","_yield$renameTag","_context10","renameTag","_x7","useTagIsRenaming","useFetchTagListByKnowledgeIds","_queryFn5","_useState","useState","_useState2","knowledgeIds","setKnowledgeIds","_useQuery4","enabled","_callee11","_yield$kbService$list","_context11","listTagByKnowledgeIds","kb_ids","join","useFetchKnowledgeGraph","_queryFn6","_useQuery5","graph","mind_map","_callee12","_yield$getKnowledgeGr","_context12","getKnowledgeGraph","useSetSelectedRecord","currentRecord","setCurrentRecord","setRecord","record","_useState3","_useState4","setSearchString","useCallback","e","target","useChangeLanguage","useTranslation","saveSetting","useSaveSetting","lng","changeLanguage","LanguageTranslationMap","language","useGetPaginationWithRouter","useTranslate","setPaginationParams","onPageChange","pageNumber","setCurrentPagination","pagination","useMemo","showQuickJumper","showSizeChanger","current","pageSizeOptions","onChange","showTotal","setPagination","useFetchAppConf","_useState7","_useState8","appConf","setAppConf","fetchAppConf","ret","axios","useEffect","useSendMessageWithSse","url","api","completeConversation","_useState9","_useState10","answer","setAnswer","_useState11","_useState12","done","setDone","timer","useRef","resetAnswer","clearTimeout","setTimeout","send","_ref2","body","controller","_response$body","response","reader","_done","val","d","fetch","method","headers","Authorization","getAuthorization","JSON","stringify","signal","clone","json","pipeThrough","TextDecoderStream","EventSourceParserStream","getReader","read","console","info","parse","conversationId","conversation_id","warn","t0","t1","t2","useSpeechWithSse","tts","_ref3","useHandleMessageInputChange","_useState13","_useState14","setValue","nextValue","replaceAll","useSelectDerivedMessages","_useState15","_useState16","derivedMessages","setDerivedMessages","ref","messages","scrollToBottom","_ref$current","scrollIntoView","behavior","useScrollToBottom","addNewestQuestion","pre","_toConsumableArray","buildMessageUuid","role","MessageType","Assistant","content","addNewestAnswer","_pre$slice","slice","reference","prompt","audio_binary","omit","removeLatestMessage","_pre$slice2","removeMessageById","messageId","_pre$filter","removeMessagesAfterCurrentMessage","index","findIndex","_pre$slice3","nextMessages","latestMessage","useRegenerateMessage","_ref4","sendMessage","regenerateMessage","_ref5","uuid","useSelectItem","defaultId","_useState17","_useState18","selectedId","setSelectedId","handleItemClick","useFetchModelId","_tenantInfo$llm_id","tenantInfo","useFetchTenantInfo","llm_id","ChunkTokenNumMap","naive","knowledge_graph","useHandleChunkMethodSelectChange","form","setFieldValue","useResetFormOnCloseModal","_ref6","visible","prevOpenRef","prevOpen","resetFields","SegmentIndex","useSegmentedPathName","useLocation","pathname","split","useSecondPathName","Second","useThirdPathName","Third","useGetKnowledgeSearchParams","currentQueryParameters","documentId","DocumentId","knowledgeId","KnowledgeId","useNavigateWithFromState","navigate","useNavigate","path","from","useNavigateToDataset","Dataset","_useSearchParams5","_useSearchParams6","queryParameters","setSearchParams","set","toString","Number","create_kb","update_kb","rm_kb","kb_list","get_document_list","document_change_status","document_rm","document_delete","document_create","document_change_parser","document_thumbnails","chunk_list","create_chunk","set_chunk","get_chunk","switch_chunk","rm_chunk","document_rename","document_run","document_upload","web_crawl","document_infos","upload_and_parse","methods","setMeta","registerServer","request","post","fromTag","toTag","isConversationIdExist","EmptyConversationId","buildMessageListWithUuid","_messages$map","getConversationId","replace","buildMessageUuidWithRole","preprocessLaTeX","_","equation","replaceThinkToSection","setInitialChatVariableEnabledFieldValue","field","ChatVariableEnabledField","MaxTokensEnabled"],"sourceRoot":""}